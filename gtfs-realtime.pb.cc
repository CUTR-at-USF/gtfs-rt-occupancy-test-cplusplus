// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto

#include "gtfs-realtime.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_gtfs_2drealtime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FeedHeader_gtfs_2drealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gtfs_2drealtime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Position_gtfs_2drealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gtfs_2drealtime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TimeRange_gtfs_2drealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gtfs_2drealtime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TranslatedString_Translation_gtfs_2drealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gtfs_2drealtime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TripDescriptor_gtfs_2drealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gtfs_2drealtime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TripUpdate_StopTimeEvent_gtfs_2drealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gtfs_2drealtime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TripUpdate_TripProperties_gtfs_2drealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gtfs_2drealtime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VehicleDescriptor_gtfs_2drealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gtfs_2drealtime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VehiclePosition_CarriageDetails_gtfs_2drealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gtfs_2drealtime_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EntitySelector_gtfs_2drealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gtfs_2drealtime_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TranslatedString_gtfs_2drealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gtfs_2drealtime_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TripUpdate_StopTimeUpdate_gtfs_2drealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gtfs_2drealtime_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Alert_gtfs_2drealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gtfs_2drealtime_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_FeedEntity_gtfs_2drealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gtfs_2drealtime_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_TripUpdate_gtfs_2drealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gtfs_2drealtime_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_VehiclePosition_gtfs_2drealtime_2eproto;
namespace transit_realtime {
class FeedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FeedMessage> _instance;
} _FeedMessage_default_instance_;
class FeedHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FeedHeader> _instance;
} _FeedHeader_default_instance_;
class FeedEntityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FeedEntity> _instance;
} _FeedEntity_default_instance_;
class TripUpdate_StopTimeEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TripUpdate_StopTimeEvent> _instance;
} _TripUpdate_StopTimeEvent_default_instance_;
class TripUpdate_StopTimeUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TripUpdate_StopTimeUpdate> _instance;
} _TripUpdate_StopTimeUpdate_default_instance_;
class TripUpdate_TripPropertiesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TripUpdate_TripProperties> _instance;
} _TripUpdate_TripProperties_default_instance_;
class TripUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TripUpdate> _instance;
} _TripUpdate_default_instance_;
class VehiclePosition_CarriageDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehiclePosition_CarriageDetails> _instance;
} _VehiclePosition_CarriageDetails_default_instance_;
class VehiclePositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehiclePosition> _instance;
} _VehiclePosition_default_instance_;
class AlertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Alert> _instance;
} _Alert_default_instance_;
class TimeRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeRange> _instance;
} _TimeRange_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class TripDescriptorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TripDescriptor> _instance;
} _TripDescriptor_default_instance_;
class VehicleDescriptorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleDescriptor> _instance;
} _VehicleDescriptor_default_instance_;
class EntitySelectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntitySelector> _instance;
} _EntitySelector_default_instance_;
class TranslatedString_TranslationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TranslatedString_Translation> _instance;
} _TranslatedString_Translation_default_instance_;
class TranslatedStringDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TranslatedString> _instance;
} _TranslatedString_default_instance_;
}  // namespace transit_realtime
static void InitDefaultsFeedMessage_gtfs_2drealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transit_realtime::_FeedMessage_default_instance_;
    new (ptr) ::transit_realtime::FeedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transit_realtime::FeedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FeedMessage_gtfs_2drealtime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFeedMessage_gtfs_2drealtime_2eproto}, {
      &scc_info_FeedHeader_gtfs_2drealtime_2eproto.base,
      &scc_info_FeedEntity_gtfs_2drealtime_2eproto.base,}};

static void InitDefaultsFeedHeader_gtfs_2drealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transit_realtime::_FeedHeader_default_instance_;
    new (ptr) ::transit_realtime::FeedHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transit_realtime::FeedHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FeedHeader_gtfs_2drealtime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFeedHeader_gtfs_2drealtime_2eproto}, {}};

static void InitDefaultsFeedEntity_gtfs_2drealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transit_realtime::_FeedEntity_default_instance_;
    new (ptr) ::transit_realtime::FeedEntity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transit_realtime::FeedEntity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_FeedEntity_gtfs_2drealtime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsFeedEntity_gtfs_2drealtime_2eproto}, {
      &scc_info_TripUpdate_gtfs_2drealtime_2eproto.base,
      &scc_info_VehiclePosition_gtfs_2drealtime_2eproto.base,
      &scc_info_Alert_gtfs_2drealtime_2eproto.base,}};

static void InitDefaultsTripUpdate_StopTimeEvent_gtfs_2drealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transit_realtime::_TripUpdate_StopTimeEvent_default_instance_;
    new (ptr) ::transit_realtime::TripUpdate_StopTimeEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transit_realtime::TripUpdate_StopTimeEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TripUpdate_StopTimeEvent_gtfs_2drealtime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTripUpdate_StopTimeEvent_gtfs_2drealtime_2eproto}, {}};

static void InitDefaultsTripUpdate_StopTimeUpdate_gtfs_2drealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transit_realtime::_TripUpdate_StopTimeUpdate_default_instance_;
    new (ptr) ::transit_realtime::TripUpdate_StopTimeUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transit_realtime::TripUpdate_StopTimeUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TripUpdate_StopTimeUpdate_gtfs_2drealtime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTripUpdate_StopTimeUpdate_gtfs_2drealtime_2eproto}, {
      &scc_info_TripUpdate_StopTimeEvent_gtfs_2drealtime_2eproto.base,}};

static void InitDefaultsTripUpdate_TripProperties_gtfs_2drealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transit_realtime::_TripUpdate_TripProperties_default_instance_;
    new (ptr) ::transit_realtime::TripUpdate_TripProperties();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transit_realtime::TripUpdate_TripProperties::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TripUpdate_TripProperties_gtfs_2drealtime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTripUpdate_TripProperties_gtfs_2drealtime_2eproto}, {}};

static void InitDefaultsTripUpdate_gtfs_2drealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transit_realtime::_TripUpdate_default_instance_;
    new (ptr) ::transit_realtime::TripUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transit_realtime::TripUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_TripUpdate_gtfs_2drealtime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsTripUpdate_gtfs_2drealtime_2eproto}, {
      &scc_info_TripDescriptor_gtfs_2drealtime_2eproto.base,
      &scc_info_VehicleDescriptor_gtfs_2drealtime_2eproto.base,
      &scc_info_TripUpdate_StopTimeUpdate_gtfs_2drealtime_2eproto.base,
      &scc_info_TripUpdate_TripProperties_gtfs_2drealtime_2eproto.base,}};

static void InitDefaultsVehiclePosition_CarriageDetails_gtfs_2drealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transit_realtime::_VehiclePosition_CarriageDetails_default_instance_;
    new (ptr) ::transit_realtime::VehiclePosition_CarriageDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transit_realtime::VehiclePosition_CarriageDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VehiclePosition_CarriageDetails_gtfs_2drealtime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVehiclePosition_CarriageDetails_gtfs_2drealtime_2eproto}, {}};

static void InitDefaultsVehiclePosition_gtfs_2drealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transit_realtime::_VehiclePosition_default_instance_;
    new (ptr) ::transit_realtime::VehiclePosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transit_realtime::VehiclePosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_VehiclePosition_gtfs_2drealtime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsVehiclePosition_gtfs_2drealtime_2eproto}, {
      &scc_info_TripDescriptor_gtfs_2drealtime_2eproto.base,
      &scc_info_VehicleDescriptor_gtfs_2drealtime_2eproto.base,
      &scc_info_Position_gtfs_2drealtime_2eproto.base,
      &scc_info_VehiclePosition_CarriageDetails_gtfs_2drealtime_2eproto.base,}};

static void InitDefaultsAlert_gtfs_2drealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transit_realtime::_Alert_default_instance_;
    new (ptr) ::transit_realtime::Alert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transit_realtime::Alert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Alert_gtfs_2drealtime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsAlert_gtfs_2drealtime_2eproto}, {
      &scc_info_TimeRange_gtfs_2drealtime_2eproto.base,
      &scc_info_EntitySelector_gtfs_2drealtime_2eproto.base,
      &scc_info_TranslatedString_gtfs_2drealtime_2eproto.base,}};

static void InitDefaultsTimeRange_gtfs_2drealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transit_realtime::_TimeRange_default_instance_;
    new (ptr) ::transit_realtime::TimeRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transit_realtime::TimeRange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TimeRange_gtfs_2drealtime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTimeRange_gtfs_2drealtime_2eproto}, {}};

static void InitDefaultsPosition_gtfs_2drealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transit_realtime::_Position_default_instance_;
    new (ptr) ::transit_realtime::Position();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transit_realtime::Position::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Position_gtfs_2drealtime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPosition_gtfs_2drealtime_2eproto}, {}};

static void InitDefaultsTripDescriptor_gtfs_2drealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transit_realtime::_TripDescriptor_default_instance_;
    new (ptr) ::transit_realtime::TripDescriptor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transit_realtime::TripDescriptor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TripDescriptor_gtfs_2drealtime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTripDescriptor_gtfs_2drealtime_2eproto}, {}};

static void InitDefaultsVehicleDescriptor_gtfs_2drealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transit_realtime::_VehicleDescriptor_default_instance_;
    new (ptr) ::transit_realtime::VehicleDescriptor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transit_realtime::VehicleDescriptor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VehicleDescriptor_gtfs_2drealtime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVehicleDescriptor_gtfs_2drealtime_2eproto}, {}};

static void InitDefaultsEntitySelector_gtfs_2drealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transit_realtime::_EntitySelector_default_instance_;
    new (ptr) ::transit_realtime::EntitySelector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transit_realtime::EntitySelector::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EntitySelector_gtfs_2drealtime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEntitySelector_gtfs_2drealtime_2eproto}, {
      &scc_info_TripDescriptor_gtfs_2drealtime_2eproto.base,}};

static void InitDefaultsTranslatedString_Translation_gtfs_2drealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transit_realtime::_TranslatedString_Translation_default_instance_;
    new (ptr) ::transit_realtime::TranslatedString_Translation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transit_realtime::TranslatedString_Translation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TranslatedString_Translation_gtfs_2drealtime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTranslatedString_Translation_gtfs_2drealtime_2eproto}, {}};

static void InitDefaultsTranslatedString_gtfs_2drealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transit_realtime::_TranslatedString_default_instance_;
    new (ptr) ::transit_realtime::TranslatedString();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transit_realtime::TranslatedString::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TranslatedString_gtfs_2drealtime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTranslatedString_gtfs_2drealtime_2eproto}, {
      &scc_info_TranslatedString_Translation_gtfs_2drealtime_2eproto.base,}};

void InitDefaults_gtfs_2drealtime_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_FeedMessage_gtfs_2drealtime_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FeedHeader_gtfs_2drealtime_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FeedEntity_gtfs_2drealtime_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TripUpdate_StopTimeEvent_gtfs_2drealtime_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TripUpdate_StopTimeUpdate_gtfs_2drealtime_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TripUpdate_TripProperties_gtfs_2drealtime_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TripUpdate_gtfs_2drealtime_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehiclePosition_CarriageDetails_gtfs_2drealtime_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehiclePosition_gtfs_2drealtime_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Alert_gtfs_2drealtime_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TimeRange_gtfs_2drealtime_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Position_gtfs_2drealtime_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TripDescriptor_gtfs_2drealtime_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleDescriptor_gtfs_2drealtime_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EntitySelector_gtfs_2drealtime_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TranslatedString_Translation_gtfs_2drealtime_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TranslatedString_gtfs_2drealtime_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_gtfs_2drealtime_2eproto[17];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_gtfs_2drealtime_2eproto[9];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_gtfs_2drealtime_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_gtfs_2drealtime_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedMessage, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedMessage, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedMessage, header_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedMessage, entity_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedHeader, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedHeader, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedHeader, gtfs_realtime_version_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedHeader, incrementality_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedHeader, timestamp_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedEntity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedEntity, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedEntity, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedEntity, id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedEntity, is_deleted_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedEntity, trip_update_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedEntity, vehicle_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::FeedEntity, alert_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeEvent, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeEvent, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeEvent, delay_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeEvent, time_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeEvent, uncertainty_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate, stop_sequence_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate, stop_id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate, arrival_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate, departure_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_StopTimeUpdate, schedule_relationship_),
  3,
  0,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_TripProperties, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_TripProperties, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_TripProperties, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_TripProperties, trip_id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_TripProperties, start_date_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate_TripProperties, start_time_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate, trip_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate, vehicle_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate, stop_time_update_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate, timestamp_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate, delay_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripUpdate, trip_properties_),
  0,
  1,
  ~0u,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition_CarriageDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition_CarriageDetails, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition_CarriageDetails, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition_CarriageDetails, id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition_CarriageDetails, label_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition_CarriageDetails, occupancy_status_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition_CarriageDetails, occupancy_percentage_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition_CarriageDetails, carriage_sequence_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, trip_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, vehicle_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, position_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, current_stop_sequence_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, stop_id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, current_status_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, timestamp_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, congestion_level_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, occupancy_status_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, occupancy_percentage_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehiclePosition, multi_carriage_details_),
  1,
  3,
  2,
  4,
  0,
  9,
  6,
  5,
  7,
  8,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, active_period_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, informed_entity_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, cause_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, effect_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, url_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, header_text_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, description_text_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, tts_header_text_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, tts_description_text_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Alert, severity_level_),
  ~0u,
  ~0u,
  6,
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TimeRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TimeRange, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TimeRange, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TimeRange, start_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TimeRange, end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Position, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Position, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Position, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Position, latitude_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Position, longitude_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Position, bearing_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Position, odometer_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::Position, speed_),
  0,
  1,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripDescriptor, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripDescriptor, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripDescriptor, trip_id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripDescriptor, route_id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripDescriptor, direction_id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripDescriptor, start_time_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripDescriptor, start_date_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TripDescriptor, schedule_relationship_),
  0,
  3,
  5,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehicleDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehicleDescriptor, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehicleDescriptor, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehicleDescriptor, id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehicleDescriptor, label_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::VehicleDescriptor, license_plate_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::EntitySelector, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::EntitySelector, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::EntitySelector, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::EntitySelector, agency_id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::EntitySelector, route_id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::EntitySelector, route_type_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::EntitySelector, trip_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::EntitySelector, stop_id_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::EntitySelector, direction_id_),
  0,
  1,
  4,
  3,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedString_Translation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedString_Translation, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedString_Translation, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedString_Translation, text_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedString_Translation, language_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedString, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedString, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedString, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transit_realtime::TranslatedString, translation_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::transit_realtime::FeedMessage)},
  { 9, 17, sizeof(::transit_realtime::FeedHeader)},
  { 20, 30, sizeof(::transit_realtime::FeedEntity)},
  { 35, 43, sizeof(::transit_realtime::TripUpdate_StopTimeEvent)},
  { 46, 56, sizeof(::transit_realtime::TripUpdate_StopTimeUpdate)},
  { 61, 69, sizeof(::transit_realtime::TripUpdate_TripProperties)},
  { 72, 83, sizeof(::transit_realtime::TripUpdate)},
  { 89, 99, sizeof(::transit_realtime::VehiclePosition_CarriageDetails)},
  { 104, 120, sizeof(::transit_realtime::VehiclePosition)},
  { 131, 146, sizeof(::transit_realtime::Alert)},
  { 156, 163, sizeof(::transit_realtime::TimeRange)},
  { 165, 175, sizeof(::transit_realtime::Position)},
  { 180, 191, sizeof(::transit_realtime::TripDescriptor)},
  { 197, 205, sizeof(::transit_realtime::VehicleDescriptor)},
  { 208, 219, sizeof(::transit_realtime::EntitySelector)},
  { 225, 232, sizeof(::transit_realtime::TranslatedString_Translation)},
  { 234, 240, sizeof(::transit_realtime::TranslatedString)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::transit_realtime::_FeedMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transit_realtime::_FeedHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transit_realtime::_FeedEntity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transit_realtime::_TripUpdate_StopTimeEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transit_realtime::_TripUpdate_StopTimeUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transit_realtime::_TripUpdate_TripProperties_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transit_realtime::_TripUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transit_realtime::_VehiclePosition_CarriageDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transit_realtime::_VehiclePosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transit_realtime::_Alert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transit_realtime::_TimeRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transit_realtime::_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transit_realtime::_TripDescriptor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transit_realtime::_VehicleDescriptor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transit_realtime::_EntitySelector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transit_realtime::_TranslatedString_Translation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transit_realtime::_TranslatedString_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_gtfs_2drealtime_2eproto = {
  {}, AddDescriptors_gtfs_2drealtime_2eproto, "gtfs-realtime.proto", schemas,
  file_default_instances, TableStruct_gtfs_2drealtime_2eproto::offsets,
  file_level_metadata_gtfs_2drealtime_2eproto, 17, file_level_enum_descriptors_gtfs_2drealtime_2eproto, file_level_service_descriptors_gtfs_2drealtime_2eproto,
};

const char descriptor_table_protodef_gtfs_2drealtime_2eproto[] =
  "\n\023gtfs-realtime.proto\022\020transit_realtime\""
  "y\n\013FeedMessage\022,\n\006header\030\001 \002(\0132\034.transit"
  "_realtime.FeedHeader\022,\n\006entity\030\002 \003(\0132\034.t"
  "ransit_realtime.FeedEntity*\006\010\350\007\020\320\017*\006\010\250F\020"
  "\220N\"\327\001\n\nFeedHeader\022\035\n\025gtfs_realtime_versi"
  "on\030\001 \002(\t\022Q\n\016incrementality\030\002 \001(\0162+.trans"
  "it_realtime.FeedHeader.Incrementality:\014F"
  "ULL_DATASET\022\021\n\ttimestamp\030\003 \001(\004\"4\n\016Increm"
  "entality\022\020\n\014FULL_DATASET\020\000\022\020\n\014DIFFERENTI"
  "AL\020\001*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"\322\001\n\nFeedEntity\022\n\n\002i"
  "d\030\001 \002(\t\022\031\n\nis_deleted\030\002 \001(\010:\005false\0221\n\013tr"
  "ip_update\030\003 \001(\0132\034.transit_realtime.TripU"
  "pdate\0222\n\007vehicle\030\004 \001(\0132!.transit_realtim"
  "e.VehiclePosition\022&\n\005alert\030\005 \001(\0132\027.trans"
  "it_realtime.Alert*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"\344\006\n\nTr"
  "ipUpdate\022.\n\004trip\030\001 \002(\0132 .transit_realtim"
  "e.TripDescriptor\0224\n\007vehicle\030\003 \001(\0132#.tran"
  "sit_realtime.VehicleDescriptor\022E\n\020stop_t"
  "ime_update\030\002 \003(\0132+.transit_realtime.Trip"
  "Update.StopTimeUpdate\022\021\n\ttimestamp\030\004 \001(\004"
  "\022\r\n\005delay\030\005 \001(\005\022D\n\017trip_properties\030\006 \001(\013"
  "2+.transit_realtime.TripUpdate.TripPrope"
  "rties\032Q\n\rStopTimeEvent\022\r\n\005delay\030\001 \001(\005\022\014\n"
  "\004time\030\002 \001(\003\022\023\n\013uncertainty\030\003 \001(\005*\006\010\350\007\020\320\017"
  "*\006\010\250F\020\220N\032\202\003\n\016StopTimeUpdate\022\025\n\rstop_sequ"
  "ence\030\001 \001(\r\022\017\n\007stop_id\030\004 \001(\t\022;\n\007arrival\030\002"
  " \001(\0132*.transit_realtime.TripUpdate.StopT"
  "imeEvent\022=\n\tdeparture\030\003 \001(\0132*.transit_re"
  "altime.TripUpdate.StopTimeEvent\022j\n\025sched"
  "ule_relationship\030\005 \001(\0162@.transit_realtim"
  "e.TripUpdate.StopTimeUpdate.ScheduleRela"
  "tionship:\tSCHEDULED\"P\n\024ScheduleRelations"
  "hip\022\r\n\tSCHEDULED\020\000\022\013\n\007SKIPPED\020\001\022\013\n\007NO_DA"
  "TA\020\002\022\017\n\013UNSCHEDULED\020\003*\006\010\350\007\020\320\017*\006\010\250F\020\220N\032Y\n"
  "\016TripProperties\022\017\n\007trip_id\030\001 \001(\t\022\022\n\nstar"
  "t_date\030\002 \001(\t\022\022\n\nstart_time\030\003 \001(\t*\006\010\350\007\020\320\017"
  "*\006\010\250F\020\220N*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"\337\t\n\017VehiclePosi"
  "tion\022.\n\004trip\030\001 \001(\0132 .transit_realtime.Tr"
  "ipDescriptor\0224\n\007vehicle\030\010 \001(\0132#.transit_"
  "realtime.VehicleDescriptor\022,\n\010position\030\002"
  " \001(\0132\032.transit_realtime.Position\022\035\n\025curr"
  "ent_stop_sequence\030\003 \001(\r\022\017\n\007stop_id\030\007 \001(\t"
  "\022Z\n\016current_status\030\004 \001(\01623.transit_realt"
  "ime.VehiclePosition.VehicleStopStatus:\rI"
  "N_TRANSIT_TO\022\021\n\ttimestamp\030\005 \001(\004\022K\n\020conge"
  "stion_level\030\006 \001(\01621.transit_realtime.Veh"
  "iclePosition.CongestionLevel\022K\n\020occupanc"
  "y_status\030\t \001(\01621.transit_realtime.Vehicl"
  "ePosition.OccupancyStatus\022\034\n\024occupancy_p"
  "ercentage\030\n \001(\r\022Q\n\026multi_carriage_detail"
  "s\030\013 \003(\01321.transit_realtime.VehiclePositi"
  "on.CarriageDetails\032\331\001\n\017CarriageDetails\022\n"
  "\n\002id\030\001 \001(\t\022\r\n\005label\030\002 \001(\t\022^\n\020occupancy_s"
  "tatus\030\003 \001(\01621.transit_realtime.VehiclePo"
  "sition.OccupancyStatus:\021NO_DATA_AVAILABL"
  "E\022 \n\024occupancy_percentage\030\004 \001(\005:\002-1\022\031\n\021c"
  "arriage_sequence\030\005 \001(\r*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"G"
  "\n\021VehicleStopStatus\022\017\n\013INCOMING_AT\020\000\022\016\n\n"
  "STOPPED_AT\020\001\022\021\n\rIN_TRANSIT_TO\020\002\"}\n\017Conge"
  "stionLevel\022\034\n\030UNKNOWN_CONGESTION_LEVEL\020\000"
  "\022\024\n\020RUNNING_SMOOTHLY\020\001\022\017\n\013STOP_AND_GO\020\002\022"
  "\016\n\nCONGESTION\020\003\022\025\n\021SEVERE_CONGESTION\020\004\"\331"
  "\001\n\017OccupancyStatus\022\t\n\005EMPTY\020\000\022\030\n\024MANY_SE"
  "ATS_AVAILABLE\020\001\022\027\n\023FEW_SEATS_AVAILABLE\020\002"
  "\022\026\n\022STANDING_ROOM_ONLY\020\003\022\036\n\032CRUSHED_STAN"
  "DING_ROOM_ONLY\020\004\022\010\n\004FULL\020\005\022\034\n\030NOT_ACCEPT"
  "ING_PASSENGERS\020\006\022\025\n\021NO_DATA_AVAILABLE\020\007\022"
  "\021\n\rNOT_BOARDABLE\020\010*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"\200\t\n\005A"
  "lert\0222\n\ractive_period\030\001 \003(\0132\033.transit_re"
  "altime.TimeRange\0229\n\017informed_entity\030\005 \003("
  "\0132 .transit_realtime.EntitySelector\022;\n\005c"
  "ause\030\006 \001(\0162\035.transit_realtime.Alert.Caus"
  "e:\rUNKNOWN_CAUSE\022>\n\006effect\030\007 \001(\0162\036.trans"
  "it_realtime.Alert.Effect:\016UNKNOWN_EFFECT"
  "\022/\n\003url\030\010 \001(\0132\".transit_realtime.Transla"
  "tedString\0227\n\013header_text\030\n \001(\0132\".transit"
  "_realtime.TranslatedString\022<\n\020descriptio"
  "n_text\030\013 \001(\0132\".transit_realtime.Translat"
  "edString\022;\n\017tts_header_text\030\014 \001(\0132\".tran"
  "sit_realtime.TranslatedString\022@\n\024tts_des"
  "cription_text\030\r \001(\0132\".transit_realtime.T"
  "ranslatedString\022O\n\016severity_level\030\016 \001(\0162"
  "%.transit_realtime.Alert.SeverityLevel:\020"
  "UNKNOWN_SEVERITY\"\330\001\n\005Cause\022\021\n\rUNKNOWN_CA"
  "USE\020\001\022\017\n\013OTHER_CAUSE\020\002\022\025\n\021TECHNICAL_PROB"
  "LEM\020\003\022\n\n\006STRIKE\020\004\022\021\n\rDEMONSTRATION\020\005\022\014\n\010"
  "ACCIDENT\020\006\022\013\n\007HOLIDAY\020\007\022\013\n\007WEATHER\020\010\022\017\n\013"
  "MAINTENANCE\020\t\022\020\n\014CONSTRUCTION\020\n\022\023\n\017POLIC"
  "E_ACTIVITY\020\013\022\025\n\021MEDICAL_EMERGENCY\020\014\"\335\001\n\006"
  "Effect\022\016\n\nNO_SERVICE\020\001\022\023\n\017REDUCED_SERVIC"
  "E\020\002\022\026\n\022SIGNIFICANT_DELAYS\020\003\022\n\n\006DETOUR\020\004\022"
  "\026\n\022ADDITIONAL_SERVICE\020\005\022\024\n\020MODIFIED_SERV"
  "ICE\020\006\022\020\n\014OTHER_EFFECT\020\007\022\022\n\016UNKNOWN_EFFEC"
  "T\020\010\022\016\n\nSTOP_MOVED\020\t\022\r\n\tNO_EFFECT\020\n\022\027\n\023AC"
  "CESSIBILITY_ISSUE\020\013\"H\n\rSeverityLevel\022\024\n\020"
  "UNKNOWN_SEVERITY\020\001\022\010\n\004INFO\020\002\022\013\n\007WARNING\020"
  "\003\022\n\n\006SEVERE\020\004*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"7\n\tTimeRan"
  "ge\022\r\n\005start\030\001 \001(\004\022\013\n\003end\030\002 \001(\004*\006\010\350\007\020\320\017*\006"
  "\010\250F\020\220N\"q\n\010Position\022\020\n\010latitude\030\001 \002(\002\022\021\n\t"
  "longitude\030\002 \002(\002\022\017\n\007bearing\030\003 \001(\002\022\020\n\010odom"
  "eter\030\004 \001(\001\022\r\n\005speed\030\005 \001(\002*\006\010\350\007\020\320\017*\006\010\250F\020\220"
  "N\"\315\002\n\016TripDescriptor\022\017\n\007trip_id\030\001 \001(\t\022\020\n"
  "\010route_id\030\005 \001(\t\022\024\n\014direction_id\030\006 \001(\r\022\022\n"
  "\nstart_time\030\002 \001(\t\022\022\n\nstart_date\030\003 \001(\t\022T\n"
  "\025schedule_relationship\030\004 \001(\01625.transit_r"
  "ealtime.TripDescriptor.ScheduleRelations"
  "hip\"t\n\024ScheduleRelationship\022\r\n\tSCHEDULED"
  "\020\000\022\t\n\005ADDED\020\001\022\017\n\013UNSCHEDULED\020\002\022\014\n\010CANCEL"
  "ED\020\003\022\023\n\013REPLACEMENT\020\005\032\002\010\001\022\016\n\nDUPLICATED\020"
  "\006*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"U\n\021VehicleDescriptor\022\n"
  "\n\002id\030\001 \001(\t\022\r\n\005label\030\002 \001(\t\022\025\n\rlicense_pla"
  "te\030\003 \001(\t*\006\010\350\007\020\320\017*\006\010\250F\020\220N\"\260\001\n\016EntitySelec"
  "tor\022\021\n\tagency_id\030\001 \001(\t\022\020\n\010route_id\030\002 \001(\t"
  "\022\022\n\nroute_type\030\003 \001(\005\022.\n\004trip\030\004 \001(\0132 .tra"
  "nsit_realtime.TripDescriptor\022\017\n\007stop_id\030"
  "\005 \001(\t\022\024\n\014direction_id\030\006 \001(\r*\006\010\350\007\020\320\017*\006\010\250F"
  "\020\220N\"\246\001\n\020TranslatedString\022C\n\013translation\030"
  "\001 \003(\0132..transit_realtime.TranslatedStrin"
  "g.Translation\032=\n\013Translation\022\014\n\004text\030\001 \002"
  "(\t\022\020\n\010language\030\002 \001(\t*\006\010\350\007\020\320\017*\006\010\250F\020\220N*\006\010\350"
  "\007\020\320\017*\006\010\250F\020\220NB\035\n\033com.google.transit.realt"
  "ime"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_gtfs_2drealtime_2eproto = {
  false, InitDefaults_gtfs_2drealtime_2eproto, 
  descriptor_table_protodef_gtfs_2drealtime_2eproto,
  "gtfs-realtime.proto", &assign_descriptors_table_gtfs_2drealtime_2eproto, 4843,
};

void AddDescriptors_gtfs_2drealtime_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_gtfs_2drealtime_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gtfs_2drealtime_2eproto = []() { AddDescriptors_gtfs_2drealtime_2eproto(); return true; }();
namespace transit_realtime {
const ::google::protobuf::EnumDescriptor* FeedHeader_Incrementality_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_gtfs_2drealtime_2eproto);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto[0];
}
bool FeedHeader_Incrementality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FeedHeader_Incrementality FeedHeader::FULL_DATASET;
const FeedHeader_Incrementality FeedHeader::DIFFERENTIAL;
const FeedHeader_Incrementality FeedHeader::Incrementality_MIN;
const FeedHeader_Incrementality FeedHeader::Incrementality_MAX;
const int FeedHeader::Incrementality_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_gtfs_2drealtime_2eproto);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto[1];
}
bool TripUpdate_StopTimeUpdate_ScheduleRelationship_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::SCHEDULED;
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::SKIPPED;
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::NO_DATA;
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::UNSCHEDULED;
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::ScheduleRelationship_MIN;
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::ScheduleRelationship_MAX;
const int TripUpdate_StopTimeUpdate::ScheduleRelationship_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VehiclePosition_VehicleStopStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_gtfs_2drealtime_2eproto);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto[2];
}
bool VehiclePosition_VehicleStopStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehiclePosition_VehicleStopStatus VehiclePosition::INCOMING_AT;
const VehiclePosition_VehicleStopStatus VehiclePosition::STOPPED_AT;
const VehiclePosition_VehicleStopStatus VehiclePosition::IN_TRANSIT_TO;
const VehiclePosition_VehicleStopStatus VehiclePosition::VehicleStopStatus_MIN;
const VehiclePosition_VehicleStopStatus VehiclePosition::VehicleStopStatus_MAX;
const int VehiclePosition::VehicleStopStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VehiclePosition_CongestionLevel_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_gtfs_2drealtime_2eproto);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto[3];
}
bool VehiclePosition_CongestionLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehiclePosition_CongestionLevel VehiclePosition::UNKNOWN_CONGESTION_LEVEL;
const VehiclePosition_CongestionLevel VehiclePosition::RUNNING_SMOOTHLY;
const VehiclePosition_CongestionLevel VehiclePosition::STOP_AND_GO;
const VehiclePosition_CongestionLevel VehiclePosition::CONGESTION;
const VehiclePosition_CongestionLevel VehiclePosition::SEVERE_CONGESTION;
const VehiclePosition_CongestionLevel VehiclePosition::CongestionLevel_MIN;
const VehiclePosition_CongestionLevel VehiclePosition::CongestionLevel_MAX;
const int VehiclePosition::CongestionLevel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VehiclePosition_OccupancyStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_gtfs_2drealtime_2eproto);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto[4];
}
bool VehiclePosition_OccupancyStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehiclePosition_OccupancyStatus VehiclePosition::EMPTY;
const VehiclePosition_OccupancyStatus VehiclePosition::MANY_SEATS_AVAILABLE;
const VehiclePosition_OccupancyStatus VehiclePosition::FEW_SEATS_AVAILABLE;
const VehiclePosition_OccupancyStatus VehiclePosition::STANDING_ROOM_ONLY;
const VehiclePosition_OccupancyStatus VehiclePosition::CRUSHED_STANDING_ROOM_ONLY;
const VehiclePosition_OccupancyStatus VehiclePosition::FULL;
const VehiclePosition_OccupancyStatus VehiclePosition::NOT_ACCEPTING_PASSENGERS;
const VehiclePosition_OccupancyStatus VehiclePosition::NO_DATA_AVAILABLE;
const VehiclePosition_OccupancyStatus VehiclePosition::NOT_BOARDABLE;
const VehiclePosition_OccupancyStatus VehiclePosition::OccupancyStatus_MIN;
const VehiclePosition_OccupancyStatus VehiclePosition::OccupancyStatus_MAX;
const int VehiclePosition::OccupancyStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Alert_Cause_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_gtfs_2drealtime_2eproto);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto[5];
}
bool Alert_Cause_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Alert_Cause Alert::UNKNOWN_CAUSE;
const Alert_Cause Alert::OTHER_CAUSE;
const Alert_Cause Alert::TECHNICAL_PROBLEM;
const Alert_Cause Alert::STRIKE;
const Alert_Cause Alert::DEMONSTRATION;
const Alert_Cause Alert::ACCIDENT;
const Alert_Cause Alert::HOLIDAY;
const Alert_Cause Alert::WEATHER;
const Alert_Cause Alert::MAINTENANCE;
const Alert_Cause Alert::CONSTRUCTION;
const Alert_Cause Alert::POLICE_ACTIVITY;
const Alert_Cause Alert::MEDICAL_EMERGENCY;
const Alert_Cause Alert::Cause_MIN;
const Alert_Cause Alert::Cause_MAX;
const int Alert::Cause_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Alert_Effect_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_gtfs_2drealtime_2eproto);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto[6];
}
bool Alert_Effect_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Alert_Effect Alert::NO_SERVICE;
const Alert_Effect Alert::REDUCED_SERVICE;
const Alert_Effect Alert::SIGNIFICANT_DELAYS;
const Alert_Effect Alert::DETOUR;
const Alert_Effect Alert::ADDITIONAL_SERVICE;
const Alert_Effect Alert::MODIFIED_SERVICE;
const Alert_Effect Alert::OTHER_EFFECT;
const Alert_Effect Alert::UNKNOWN_EFFECT;
const Alert_Effect Alert::STOP_MOVED;
const Alert_Effect Alert::NO_EFFECT;
const Alert_Effect Alert::ACCESSIBILITY_ISSUE;
const Alert_Effect Alert::Effect_MIN;
const Alert_Effect Alert::Effect_MAX;
const int Alert::Effect_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Alert_SeverityLevel_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_gtfs_2drealtime_2eproto);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto[7];
}
bool Alert_SeverityLevel_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Alert_SeverityLevel Alert::UNKNOWN_SEVERITY;
const Alert_SeverityLevel Alert::INFO;
const Alert_SeverityLevel Alert::WARNING;
const Alert_SeverityLevel Alert::SEVERE;
const Alert_SeverityLevel Alert::SeverityLevel_MIN;
const Alert_SeverityLevel Alert::SeverityLevel_MAX;
const int Alert::SeverityLevel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TripDescriptor_ScheduleRelationship_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_gtfs_2drealtime_2eproto);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto[8];
}
bool TripDescriptor_ScheduleRelationship_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TripDescriptor_ScheduleRelationship TripDescriptor::SCHEDULED;
const TripDescriptor_ScheduleRelationship TripDescriptor::ADDED;
const TripDescriptor_ScheduleRelationship TripDescriptor::UNSCHEDULED;
const TripDescriptor_ScheduleRelationship TripDescriptor::CANCELED;
const TripDescriptor_ScheduleRelationship TripDescriptor::REPLACEMENT;
const TripDescriptor_ScheduleRelationship TripDescriptor::DUPLICATED;
const TripDescriptor_ScheduleRelationship TripDescriptor::ScheduleRelationship_MIN;
const TripDescriptor_ScheduleRelationship TripDescriptor::ScheduleRelationship_MAX;
const int TripDescriptor::ScheduleRelationship_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void FeedMessage::InitAsDefaultInstance() {
  ::transit_realtime::_FeedMessage_default_instance_._instance.get_mutable()->header_ = const_cast< ::transit_realtime::FeedHeader*>(
      ::transit_realtime::FeedHeader::internal_default_instance());
}
class FeedMessage::HasBitSetters {
 public:
  static const ::transit_realtime::FeedHeader& header(const FeedMessage* msg);
  static void set_has_header(FeedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::transit_realtime::FeedHeader&
FeedMessage::HasBitSetters::header(const FeedMessage* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeedMessage::kHeaderFieldNumber;
const int FeedMessage::kEntityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeedMessage::FeedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.FeedMessage)
}
FeedMessage::FeedMessage(const FeedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entity_(from.entity_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from.has_header()) {
    header_ = new ::transit_realtime::FeedHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:transit_realtime.FeedMessage)
}

void FeedMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FeedMessage_gtfs_2drealtime_2eproto.base);
  header_ = nullptr;
}

FeedMessage::~FeedMessage() {
  // @@protoc_insertion_point(destructor:transit_realtime.FeedMessage)
  SharedDtor();
}

void FeedMessage::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void FeedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeedMessage& FeedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FeedMessage_gtfs_2drealtime_2eproto.base);
  return *internal_default_instance();
}


void FeedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.FeedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  entity_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FeedMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FeedMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .transit_realtime.FeedHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::transit_realtime::FeedHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .transit_realtime.FeedEntity entity = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::transit_realtime::FeedEntity::_InternalParse;
          object = msg->add_entity();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
      if ((8000u <= tag && tag < 16000u) ||
          (72000u <= tag && tag < 80000u)) {
        auto res = msg->_extensions_.ParseField(tag, {_InternalParse, msg}, ptr, end,
            internal_default_instance(), &msg->_internal_metadata_, ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
        continue;
      }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FeedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.FeedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .transit_realtime.FeedHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .transit_realtime.FeedEntity entity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag && tag < 16000u) ||
            (72000u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.FeedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.FeedMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FeedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.FeedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .transit_realtime.FeedHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // repeated .transit_realtime.FeedEntity entity = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entity_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->entity(static_cast<int>(i)),
      output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(1000, 2000, output);

  // Extension range [9000, 10000)
  _extensions_.SerializeWithCachedSizes(9000, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transit_realtime.FeedMessage)
}

::google::protobuf::uint8* FeedMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.FeedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .transit_realtime.FeedHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // repeated .transit_realtime.FeedEntity entity = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entity_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->entity(static_cast<int>(i)), target);
  }

  // Extension range [1000, 2000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 2000, target);

  // Extension range [9000, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      9000, 10000, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.FeedMessage)
  return target;
}

size_t FeedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.FeedMessage)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .transit_realtime.FeedHeader header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transit_realtime.FeedEntity entity = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->entity_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entity(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.FeedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FeedMessage* source =
      ::google::protobuf::DynamicCastToGenerated<FeedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.FeedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.FeedMessage)
    MergeFrom(*source);
  }
}

void FeedMessage::MergeFrom(const FeedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.FeedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entity_.MergeFrom(from.entity_);
  if (from.has_header()) {
    mutable_header()->::transit_realtime::FeedHeader::MergeFrom(from.header());
  }
}

void FeedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.FeedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedMessage::CopyFrom(const FeedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.FeedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedMessage::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->entity())) return false;
  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  return true;
}

void FeedMessage::Swap(FeedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeedMessage::InternalSwap(FeedMessage* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entity_)->InternalSwap(CastToBase(&other->entity_));
  swap(header_, other->header_);
}

::google::protobuf::Metadata FeedMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gtfs_2drealtime_2eproto);
  return ::file_level_metadata_gtfs_2drealtime_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FeedHeader::InitAsDefaultInstance() {
}
class FeedHeader::HasBitSetters {
 public:
  static void set_has_gtfs_realtime_version(FeedHeader* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_incrementality(FeedHeader* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_timestamp(FeedHeader* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeedHeader::kGtfsRealtimeVersionFieldNumber;
const int FeedHeader::kIncrementalityFieldNumber;
const int FeedHeader::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeedHeader::FeedHeader()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.FeedHeader)
}
FeedHeader::FeedHeader(const FeedHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  gtfs_realtime_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gtfs_realtime_version()) {
    gtfs_realtime_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gtfs_realtime_version_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&incrementality_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(incrementality_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.FeedHeader)
}

void FeedHeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FeedHeader_gtfs_2drealtime_2eproto.base);
  gtfs_realtime_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&incrementality_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(incrementality_));
}

FeedHeader::~FeedHeader() {
  // @@protoc_insertion_point(destructor:transit_realtime.FeedHeader)
  SharedDtor();
}

void FeedHeader::SharedDtor() {
  gtfs_realtime_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FeedHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeedHeader& FeedHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FeedHeader_gtfs_2drealtime_2eproto.base);
  return *internal_default_instance();
}


void FeedHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.FeedHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gtfs_realtime_version_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&incrementality_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(incrementality_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FeedHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FeedHeader*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string gtfs_realtime_version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.FeedHeader.gtfs_realtime_version");
        object = msg->mutable_gtfs_realtime_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::transit_realtime::FeedHeader_Incrementality_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_incrementality(static_cast<::transit_realtime::FeedHeader_Incrementality>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 timestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
      if ((8000u <= tag && tag < 16000u) ||
          (72000u <= tag && tag < 80000u)) {
        auto res = msg->_extensions_.ParseField(tag, {_InternalParse, msg}, ptr, end,
            internal_default_instance(), &msg->_internal_metadata_, ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
        continue;
      }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FeedHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.FeedHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gtfs_realtime_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gtfs_realtime_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gtfs_realtime_version().data(), static_cast<int>(this->gtfs_realtime_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.FeedHeader.gtfs_realtime_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::FeedHeader_Incrementality_IsValid(value)) {
            set_incrementality(static_cast< ::transit_realtime::FeedHeader_Incrementality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag && tag < 16000u) ||
            (72000u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.FeedHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.FeedHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FeedHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.FeedHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string gtfs_realtime_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gtfs_realtime_version().data(), static_cast<int>(this->gtfs_realtime_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.FeedHeader.gtfs_realtime_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gtfs_realtime_version(), output);
  }

  // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->incrementality(), output);
  }

  // optional uint64 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(1000, 2000, output);

  // Extension range [9000, 10000)
  _extensions_.SerializeWithCachedSizes(9000, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transit_realtime.FeedHeader)
}

::google::protobuf::uint8* FeedHeader::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.FeedHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string gtfs_realtime_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gtfs_realtime_version().data(), static_cast<int>(this->gtfs_realtime_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.FeedHeader.gtfs_realtime_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gtfs_realtime_version(), target);
  }

  // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->incrementality(), target);
  }

  // optional uint64 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // Extension range [1000, 2000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 2000, target);

  // Extension range [9000, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      9000, 10000, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.FeedHeader)
  return target;
}

size_t FeedHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.FeedHeader)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string gtfs_realtime_version = 1;
  if (has_gtfs_realtime_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gtfs_realtime_version());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint64 timestamp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->incrementality());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeedHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.FeedHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const FeedHeader* source =
      ::google::protobuf::DynamicCastToGenerated<FeedHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.FeedHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.FeedHeader)
    MergeFrom(*source);
  }
}

void FeedHeader::MergeFrom(const FeedHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.FeedHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      gtfs_realtime_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gtfs_realtime_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      incrementality_ = from.incrementality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FeedHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.FeedHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedHeader::CopyFrom(const FeedHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.FeedHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedHeader::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FeedHeader::Swap(FeedHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeedHeader::InternalSwap(FeedHeader* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gtfs_realtime_version_.Swap(&other->gtfs_realtime_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(incrementality_, other->incrementality_);
}

::google::protobuf::Metadata FeedHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gtfs_2drealtime_2eproto);
  return ::file_level_metadata_gtfs_2drealtime_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FeedEntity::InitAsDefaultInstance() {
  ::transit_realtime::_FeedEntity_default_instance_._instance.get_mutable()->trip_update_ = const_cast< ::transit_realtime::TripUpdate*>(
      ::transit_realtime::TripUpdate::internal_default_instance());
  ::transit_realtime::_FeedEntity_default_instance_._instance.get_mutable()->vehicle_ = const_cast< ::transit_realtime::VehiclePosition*>(
      ::transit_realtime::VehiclePosition::internal_default_instance());
  ::transit_realtime::_FeedEntity_default_instance_._instance.get_mutable()->alert_ = const_cast< ::transit_realtime::Alert*>(
      ::transit_realtime::Alert::internal_default_instance());
}
class FeedEntity::HasBitSetters {
 public:
  static void set_has_id(FeedEntity* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_is_deleted(FeedEntity* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::transit_realtime::TripUpdate& trip_update(const FeedEntity* msg);
  static void set_has_trip_update(FeedEntity* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::transit_realtime::VehiclePosition& vehicle(const FeedEntity* msg);
  static void set_has_vehicle(FeedEntity* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::transit_realtime::Alert& alert(const FeedEntity* msg);
  static void set_has_alert(FeedEntity* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::transit_realtime::TripUpdate&
FeedEntity::HasBitSetters::trip_update(const FeedEntity* msg) {
  return *msg->trip_update_;
}
const ::transit_realtime::VehiclePosition&
FeedEntity::HasBitSetters::vehicle(const FeedEntity* msg) {
  return *msg->vehicle_;
}
const ::transit_realtime::Alert&
FeedEntity::HasBitSetters::alert(const FeedEntity* msg) {
  return *msg->alert_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeedEntity::kIdFieldNumber;
const int FeedEntity::kIsDeletedFieldNumber;
const int FeedEntity::kTripUpdateFieldNumber;
const int FeedEntity::kVehicleFieldNumber;
const int FeedEntity::kAlertFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeedEntity::FeedEntity()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.FeedEntity)
}
FeedEntity::FeedEntity(const FeedEntity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_trip_update()) {
    trip_update_ = new ::transit_realtime::TripUpdate(*from.trip_update_);
  } else {
    trip_update_ = nullptr;
  }
  if (from.has_vehicle()) {
    vehicle_ = new ::transit_realtime::VehiclePosition(*from.vehicle_);
  } else {
    vehicle_ = nullptr;
  }
  if (from.has_alert()) {
    alert_ = new ::transit_realtime::Alert(*from.alert_);
  } else {
    alert_ = nullptr;
  }
  is_deleted_ = from.is_deleted_;
  // @@protoc_insertion_point(copy_constructor:transit_realtime.FeedEntity)
}

void FeedEntity::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FeedEntity_gtfs_2drealtime_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trip_update_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_deleted_) -
      reinterpret_cast<char*>(&trip_update_)) + sizeof(is_deleted_));
}

FeedEntity::~FeedEntity() {
  // @@protoc_insertion_point(destructor:transit_realtime.FeedEntity)
  SharedDtor();
}

void FeedEntity::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trip_update_;
  if (this != internal_default_instance()) delete vehicle_;
  if (this != internal_default_instance()) delete alert_;
}

void FeedEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeedEntity& FeedEntity::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FeedEntity_gtfs_2drealtime_2eproto.base);
  return *internal_default_instance();
}


void FeedEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.FeedEntity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(trip_update_ != nullptr);
      trip_update_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vehicle_ != nullptr);
      vehicle_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(alert_ != nullptr);
      alert_->Clear();
    }
  }
  is_deleted_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FeedEntity::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FeedEntity*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.FeedEntity.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool is_deleted = 2 [default = false];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_deleted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .transit_realtime.TripUpdate trip_update = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::transit_realtime::TripUpdate::_InternalParse;
        object = msg->mutable_trip_update();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .transit_realtime.VehiclePosition vehicle = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::transit_realtime::VehiclePosition::_InternalParse;
        object = msg->mutable_vehicle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .transit_realtime.Alert alert = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::transit_realtime::Alert::_InternalParse;
        object = msg->mutable_alert();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
      if ((8000u <= tag && tag < 16000u) ||
          (72000u <= tag && tag < 80000u)) {
        auto res = msg->_extensions_.ParseField(tag, {_InternalParse, msg}, ptr, end,
            internal_default_instance(), &msg->_internal_metadata_, ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
        continue;
      }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FeedEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.FeedEntity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.FeedEntity.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_deleted = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_is_deleted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_deleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.TripUpdate trip_update = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trip_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.VehiclePosition vehicle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.Alert alert = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag && tag < 16000u) ||
            (72000u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.FeedEntity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.FeedEntity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FeedEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.FeedEntity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.FeedEntity.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional bool is_deleted = 2 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_deleted(), output);
  }

  // optional .transit_realtime.TripUpdate trip_update = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::trip_update(this), output);
  }

  // optional .transit_realtime.VehiclePosition vehicle = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::vehicle(this), output);
  }

  // optional .transit_realtime.Alert alert = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::alert(this), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(1000, 2000, output);

  // Extension range [9000, 10000)
  _extensions_.SerializeWithCachedSizes(9000, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transit_realtime.FeedEntity)
}

::google::protobuf::uint8* FeedEntity::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.FeedEntity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.FeedEntity.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional bool is_deleted = 2 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_deleted(), target);
  }

  // optional .transit_realtime.TripUpdate trip_update = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::trip_update(this), target);
  }

  // optional .transit_realtime.VehiclePosition vehicle = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::vehicle(this), target);
  }

  // optional .transit_realtime.Alert alert = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::alert(this), target);
  }

  // Extension range [1000, 2000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 2000, target);

  // Extension range [9000, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      9000, 10000, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.FeedEntity)
  return target;
}

size_t FeedEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.FeedEntity)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .transit_realtime.TripUpdate trip_update = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *trip_update_);
    }

    // optional .transit_realtime.VehiclePosition vehicle = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vehicle_);
    }

    // optional .transit_realtime.Alert alert = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *alert_);
    }

    // optional bool is_deleted = 2 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeedEntity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.FeedEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const FeedEntity* source =
      ::google::protobuf::DynamicCastToGenerated<FeedEntity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.FeedEntity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.FeedEntity)
    MergeFrom(*source);
  }
}

void FeedEntity::MergeFrom(const FeedEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.FeedEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_trip_update()->::transit_realtime::TripUpdate::MergeFrom(from.trip_update());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_vehicle()->::transit_realtime::VehiclePosition::MergeFrom(from.vehicle());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_alert()->::transit_realtime::Alert::MergeFrom(from.alert());
    }
    if (cached_has_bits & 0x00000010u) {
      is_deleted_ = from.is_deleted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FeedEntity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.FeedEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedEntity::CopyFrom(const FeedEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.FeedEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedEntity::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_trip_update()) {
    if (!this->trip_update_->IsInitialized()) return false;
  }
  if (has_vehicle()) {
    if (!this->vehicle_->IsInitialized()) return false;
  }
  if (has_alert()) {
    if (!this->alert_->IsInitialized()) return false;
  }
  return true;
}

void FeedEntity::Swap(FeedEntity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeedEntity::InternalSwap(FeedEntity* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trip_update_, other->trip_update_);
  swap(vehicle_, other->vehicle_);
  swap(alert_, other->alert_);
  swap(is_deleted_, other->is_deleted_);
}

::google::protobuf::Metadata FeedEntity::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gtfs_2drealtime_2eproto);
  return ::file_level_metadata_gtfs_2drealtime_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TripUpdate_StopTimeEvent::InitAsDefaultInstance() {
}
class TripUpdate_StopTimeEvent::HasBitSetters {
 public:
  static void set_has_delay(TripUpdate_StopTimeEvent* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_time(TripUpdate_StopTimeEvent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_uncertainty(TripUpdate_StopTimeEvent* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TripUpdate_StopTimeEvent::kDelayFieldNumber;
const int TripUpdate_StopTimeEvent::kTimeFieldNumber;
const int TripUpdate_StopTimeEvent::kUncertaintyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TripUpdate_StopTimeEvent::TripUpdate_StopTimeEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.TripUpdate.StopTimeEvent)
}
TripUpdate_StopTimeEvent::TripUpdate_StopTimeEvent(const TripUpdate_StopTimeEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&uncertainty_) -
    reinterpret_cast<char*>(&time_)) + sizeof(uncertainty_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TripUpdate.StopTimeEvent)
}

void TripUpdate_StopTimeEvent::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uncertainty_) -
      reinterpret_cast<char*>(&time_)) + sizeof(uncertainty_));
}

TripUpdate_StopTimeEvent::~TripUpdate_StopTimeEvent() {
  // @@protoc_insertion_point(destructor:transit_realtime.TripUpdate.StopTimeEvent)
  SharedDtor();
}

void TripUpdate_StopTimeEvent::SharedDtor() {
}

void TripUpdate_StopTimeEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TripUpdate_StopTimeEvent& TripUpdate_StopTimeEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TripUpdate_StopTimeEvent_gtfs_2drealtime_2eproto.base);
  return *internal_default_instance();
}


void TripUpdate_StopTimeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TripUpdate.StopTimeEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uncertainty_) -
        reinterpret_cast<char*>(&time_)) + sizeof(uncertainty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TripUpdate_StopTimeEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TripUpdate_StopTimeEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 delay = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_delay(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 uncertainty = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_uncertainty(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
      if ((8000u <= tag && tag < 16000u) ||
          (72000u <= tag && tag < 80000u)) {
        auto res = msg->_extensions_.ParseField(tag, {_InternalParse, msg}, ptr, end,
            internal_default_instance(), &msg->_internal_metadata_, ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
        continue;
      }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TripUpdate_StopTimeEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.TripUpdate.StopTimeEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 delay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_delay(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uncertainty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_uncertainty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uncertainty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag && tag < 16000u) ||
            (72000u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.TripUpdate.StopTimeEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.TripUpdate.StopTimeEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TripUpdate_StopTimeEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.TripUpdate.StopTimeEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 delay = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->delay(), output);
  }

  // optional int64 time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // optional int32 uncertainty = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uncertainty(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(1000, 2000, output);

  // Extension range [9000, 10000)
  _extensions_.SerializeWithCachedSizes(9000, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transit_realtime.TripUpdate.StopTimeEvent)
}

::google::protobuf::uint8* TripUpdate_StopTimeEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TripUpdate.StopTimeEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 delay = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->delay(), target);
  }

  // optional int64 time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // optional int32 uncertainty = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uncertainty(), target);
  }

  // Extension range [1000, 2000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 2000, target);

  // Extension range [9000, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      9000, 10000, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TripUpdate.StopTimeEvent)
  return target;
}

size_t TripUpdate_StopTimeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TripUpdate.StopTimeEvent)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 time = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 delay = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay());
    }

    // optional int32 uncertainty = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uncertainty());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TripUpdate_StopTimeEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.TripUpdate.StopTimeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const TripUpdate_StopTimeEvent* source =
      ::google::protobuf::DynamicCastToGenerated<TripUpdate_StopTimeEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.TripUpdate.StopTimeEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.TripUpdate.StopTimeEvent)
    MergeFrom(*source);
  }
}

void TripUpdate_StopTimeEvent::MergeFrom(const TripUpdate_StopTimeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TripUpdate.StopTimeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      delay_ = from.delay_;
    }
    if (cached_has_bits & 0x00000004u) {
      uncertainty_ = from.uncertainty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TripUpdate_StopTimeEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.TripUpdate.StopTimeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripUpdate_StopTimeEvent::CopyFrom(const TripUpdate_StopTimeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TripUpdate.StopTimeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripUpdate_StopTimeEvent::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TripUpdate_StopTimeEvent::Swap(TripUpdate_StopTimeEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TripUpdate_StopTimeEvent::InternalSwap(TripUpdate_StopTimeEvent* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_, other->time_);
  swap(delay_, other->delay_);
  swap(uncertainty_, other->uncertainty_);
}

::google::protobuf::Metadata TripUpdate_StopTimeEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gtfs_2drealtime_2eproto);
  return ::file_level_metadata_gtfs_2drealtime_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TripUpdate_StopTimeUpdate::InitAsDefaultInstance() {
  ::transit_realtime::_TripUpdate_StopTimeUpdate_default_instance_._instance.get_mutable()->arrival_ = const_cast< ::transit_realtime::TripUpdate_StopTimeEvent*>(
      ::transit_realtime::TripUpdate_StopTimeEvent::internal_default_instance());
  ::transit_realtime::_TripUpdate_StopTimeUpdate_default_instance_._instance.get_mutable()->departure_ = const_cast< ::transit_realtime::TripUpdate_StopTimeEvent*>(
      ::transit_realtime::TripUpdate_StopTimeEvent::internal_default_instance());
}
class TripUpdate_StopTimeUpdate::HasBitSetters {
 public:
  static void set_has_stop_sequence(TripUpdate_StopTimeUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_stop_id(TripUpdate_StopTimeUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::transit_realtime::TripUpdate_StopTimeEvent& arrival(const TripUpdate_StopTimeUpdate* msg);
  static void set_has_arrival(TripUpdate_StopTimeUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::transit_realtime::TripUpdate_StopTimeEvent& departure(const TripUpdate_StopTimeUpdate* msg);
  static void set_has_departure(TripUpdate_StopTimeUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_schedule_relationship(TripUpdate_StopTimeUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::transit_realtime::TripUpdate_StopTimeEvent&
TripUpdate_StopTimeUpdate::HasBitSetters::arrival(const TripUpdate_StopTimeUpdate* msg) {
  return *msg->arrival_;
}
const ::transit_realtime::TripUpdate_StopTimeEvent&
TripUpdate_StopTimeUpdate::HasBitSetters::departure(const TripUpdate_StopTimeUpdate* msg) {
  return *msg->departure_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TripUpdate_StopTimeUpdate::kStopSequenceFieldNumber;
const int TripUpdate_StopTimeUpdate::kStopIdFieldNumber;
const int TripUpdate_StopTimeUpdate::kArrivalFieldNumber;
const int TripUpdate_StopTimeUpdate::kDepartureFieldNumber;
const int TripUpdate_StopTimeUpdate::kScheduleRelationshipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TripUpdate_StopTimeUpdate::TripUpdate_StopTimeUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.TripUpdate.StopTimeUpdate)
}
TripUpdate_StopTimeUpdate::TripUpdate_StopTimeUpdate(const TripUpdate_StopTimeUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  stop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stop_id()) {
    stop_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stop_id_);
  }
  if (from.has_arrival()) {
    arrival_ = new ::transit_realtime::TripUpdate_StopTimeEvent(*from.arrival_);
  } else {
    arrival_ = nullptr;
  }
  if (from.has_departure()) {
    departure_ = new ::transit_realtime::TripUpdate_StopTimeEvent(*from.departure_);
  } else {
    departure_ = nullptr;
  }
  ::memcpy(&stop_sequence_, &from.stop_sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&schedule_relationship_) -
    reinterpret_cast<char*>(&stop_sequence_)) + sizeof(schedule_relationship_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TripUpdate.StopTimeUpdate)
}

void TripUpdate_StopTimeUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TripUpdate_StopTimeUpdate_gtfs_2drealtime_2eproto.base);
  stop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&arrival_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&schedule_relationship_) -
      reinterpret_cast<char*>(&arrival_)) + sizeof(schedule_relationship_));
}

TripUpdate_StopTimeUpdate::~TripUpdate_StopTimeUpdate() {
  // @@protoc_insertion_point(destructor:transit_realtime.TripUpdate.StopTimeUpdate)
  SharedDtor();
}

void TripUpdate_StopTimeUpdate::SharedDtor() {
  stop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete arrival_;
  if (this != internal_default_instance()) delete departure_;
}

void TripUpdate_StopTimeUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TripUpdate_StopTimeUpdate& TripUpdate_StopTimeUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TripUpdate_StopTimeUpdate_gtfs_2drealtime_2eproto.base);
  return *internal_default_instance();
}


void TripUpdate_StopTimeUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TripUpdate.StopTimeUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      stop_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(arrival_ != nullptr);
      arrival_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(departure_ != nullptr);
      departure_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&stop_sequence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&schedule_relationship_) -
        reinterpret_cast<char*>(&stop_sequence_)) + sizeof(schedule_relationship_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TripUpdate_StopTimeUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TripUpdate_StopTimeUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 stop_sequence = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_stop_sequence(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::transit_realtime::TripUpdate_StopTimeEvent::_InternalParse;
        object = msg->mutable_arrival();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::transit_realtime::TripUpdate_StopTimeEvent::_InternalParse;
        object = msg->mutable_departure();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional string stop_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.TripUpdate.StopTimeUpdate.stop_id");
        object = msg->mutable_stop_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_schedule_relationship(static_cast<::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
      if ((8000u <= tag && tag < 16000u) ||
          (72000u <= tag && tag < 80000u)) {
        auto res = msg->_extensions_.ParseField(tag, {_InternalParse, msg}, ptr, end,
            internal_default_instance(), &msg->_internal_metadata_, ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
        continue;
      }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TripUpdate_StopTimeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.TripUpdate.StopTimeUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stop_sequence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_stop_sequence(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_arrival()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_departure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stop_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stop_id().data(), static_cast<int>(this->stop_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.TripUpdate.StopTimeUpdate.stop_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship_IsValid(value)) {
            set_schedule_relationship(static_cast< ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag && tag < 16000u) ||
            (72000u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.TripUpdate.StopTimeUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.TripUpdate.StopTimeUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TripUpdate_StopTimeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.TripUpdate.StopTimeUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stop_sequence = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stop_sequence(), output);
  }

  // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::arrival(this), output);
  }

  // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::departure(this), output);
  }

  // optional string stop_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stop_id().data(), static_cast<int>(this->stop_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripUpdate.StopTimeUpdate.stop_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stop_id(), output);
  }

  // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->schedule_relationship(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(1000, 2000, output);

  // Extension range [9000, 10000)
  _extensions_.SerializeWithCachedSizes(9000, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transit_realtime.TripUpdate.StopTimeUpdate)
}

::google::protobuf::uint8* TripUpdate_StopTimeUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TripUpdate.StopTimeUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stop_sequence = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stop_sequence(), target);
  }

  // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::arrival(this), target);
  }

  // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::departure(this), target);
  }

  // optional string stop_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stop_id().data(), static_cast<int>(this->stop_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripUpdate.StopTimeUpdate.stop_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stop_id(), target);
  }

  // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->schedule_relationship(), target);
  }

  // Extension range [1000, 2000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 2000, target);

  // Extension range [9000, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      9000, 10000, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TripUpdate.StopTimeUpdate)
  return target;
}

size_t TripUpdate_StopTimeUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TripUpdate.StopTimeUpdate)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string stop_id = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_id());
    }

    // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *arrival_);
    }

    // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *departure_);
    }

    // optional uint32 stop_sequence = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stop_sequence());
    }

    // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->schedule_relationship());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TripUpdate_StopTimeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.TripUpdate.StopTimeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const TripUpdate_StopTimeUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<TripUpdate_StopTimeUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.TripUpdate.StopTimeUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.TripUpdate.StopTimeUpdate)
    MergeFrom(*source);
  }
}

void TripUpdate_StopTimeUpdate::MergeFrom(const TripUpdate_StopTimeUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TripUpdate.StopTimeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      stop_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stop_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_arrival()->::transit_realtime::TripUpdate_StopTimeEvent::MergeFrom(from.arrival());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_departure()->::transit_realtime::TripUpdate_StopTimeEvent::MergeFrom(from.departure());
    }
    if (cached_has_bits & 0x00000008u) {
      stop_sequence_ = from.stop_sequence_;
    }
    if (cached_has_bits & 0x00000010u) {
      schedule_relationship_ = from.schedule_relationship_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TripUpdate_StopTimeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.TripUpdate.StopTimeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripUpdate_StopTimeUpdate::CopyFrom(const TripUpdate_StopTimeUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TripUpdate.StopTimeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripUpdate_StopTimeUpdate::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (has_arrival()) {
    if (!this->arrival_->IsInitialized()) return false;
  }
  if (has_departure()) {
    if (!this->departure_->IsInitialized()) return false;
  }
  return true;
}

void TripUpdate_StopTimeUpdate::Swap(TripUpdate_StopTimeUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TripUpdate_StopTimeUpdate::InternalSwap(TripUpdate_StopTimeUpdate* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stop_id_.Swap(&other->stop_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(arrival_, other->arrival_);
  swap(departure_, other->departure_);
  swap(stop_sequence_, other->stop_sequence_);
  swap(schedule_relationship_, other->schedule_relationship_);
}

::google::protobuf::Metadata TripUpdate_StopTimeUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gtfs_2drealtime_2eproto);
  return ::file_level_metadata_gtfs_2drealtime_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TripUpdate_TripProperties::InitAsDefaultInstance() {
}
class TripUpdate_TripProperties::HasBitSetters {
 public:
  static void set_has_trip_id(TripUpdate_TripProperties* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_start_date(TripUpdate_TripProperties* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_start_time(TripUpdate_TripProperties* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TripUpdate_TripProperties::kTripIdFieldNumber;
const int TripUpdate_TripProperties::kStartDateFieldNumber;
const int TripUpdate_TripProperties::kStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TripUpdate_TripProperties::TripUpdate_TripProperties()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.TripUpdate.TripProperties)
}
TripUpdate_TripProperties::TripUpdate_TripProperties(const TripUpdate_TripProperties& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  trip_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trip_id()) {
    trip_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trip_id_);
  }
  start_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_date()) {
    start_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_date_);
  }
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_time()) {
    start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_);
  }
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TripUpdate.TripProperties)
}

void TripUpdate_TripProperties::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TripUpdate_TripProperties_gtfs_2drealtime_2eproto.base);
  trip_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TripUpdate_TripProperties::~TripUpdate_TripProperties() {
  // @@protoc_insertion_point(destructor:transit_realtime.TripUpdate.TripProperties)
  SharedDtor();
}

void TripUpdate_TripProperties::SharedDtor() {
  trip_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TripUpdate_TripProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TripUpdate_TripProperties& TripUpdate_TripProperties::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TripUpdate_TripProperties_gtfs_2drealtime_2eproto.base);
  return *internal_default_instance();
}


void TripUpdate_TripProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TripUpdate.TripProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      trip_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      start_date_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TripUpdate_TripProperties::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TripUpdate_TripProperties*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string trip_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.TripUpdate.TripProperties.trip_id");
        object = msg->mutable_trip_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string start_date = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.TripUpdate.TripProperties.start_date");
        object = msg->mutable_start_date();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string start_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.TripUpdate.TripProperties.start_time");
        object = msg->mutable_start_time();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
      if ((8000u <= tag && tag < 16000u) ||
          (72000u <= tag && tag < 80000u)) {
        auto res = msg->_extensions_.ParseField(tag, {_InternalParse, msg}, ptr, end,
            internal_default_instance(), &msg->_internal_metadata_, ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
        continue;
      }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TripUpdate_TripProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.TripUpdate.TripProperties)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string trip_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trip_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trip_id().data(), static_cast<int>(this->trip_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.TripUpdate.TripProperties.trip_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string start_date = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_date().data(), static_cast<int>(this->start_date().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.TripUpdate.TripProperties.start_date");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string start_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_time().data(), static_cast<int>(this->start_time().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.TripUpdate.TripProperties.start_time");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag && tag < 16000u) ||
            (72000u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.TripUpdate.TripProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.TripUpdate.TripProperties)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TripUpdate_TripProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.TripUpdate.TripProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string trip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trip_id().data(), static_cast<int>(this->trip_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripUpdate.TripProperties.trip_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->trip_id(), output);
  }

  // optional string start_date = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_date().data(), static_cast<int>(this->start_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripUpdate.TripProperties.start_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->start_date(), output);
  }

  // optional string start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_time().data(), static_cast<int>(this->start_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripUpdate.TripProperties.start_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->start_time(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(1000, 2000, output);

  // Extension range [9000, 10000)
  _extensions_.SerializeWithCachedSizes(9000, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transit_realtime.TripUpdate.TripProperties)
}

::google::protobuf::uint8* TripUpdate_TripProperties::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TripUpdate.TripProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string trip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trip_id().data(), static_cast<int>(this->trip_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripUpdate.TripProperties.trip_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trip_id(), target);
  }

  // optional string start_date = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_date().data(), static_cast<int>(this->start_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripUpdate.TripProperties.start_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->start_date(), target);
  }

  // optional string start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_time().data(), static_cast<int>(this->start_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripUpdate.TripProperties.start_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->start_time(), target);
  }

  // Extension range [1000, 2000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 2000, target);

  // Extension range [9000, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      9000, 10000, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TripUpdate.TripProperties)
  return target;
}

size_t TripUpdate_TripProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TripUpdate.TripProperties)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string trip_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trip_id());
    }

    // optional string start_date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_date());
    }

    // optional string start_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TripUpdate_TripProperties::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.TripUpdate.TripProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const TripUpdate_TripProperties* source =
      ::google::protobuf::DynamicCastToGenerated<TripUpdate_TripProperties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.TripUpdate.TripProperties)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.TripUpdate.TripProperties)
    MergeFrom(*source);
  }
}

void TripUpdate_TripProperties::MergeFrom(const TripUpdate_TripProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TripUpdate.TripProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      trip_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trip_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      start_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_date_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_);
    }
  }
}

void TripUpdate_TripProperties::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.TripUpdate.TripProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripUpdate_TripProperties::CopyFrom(const TripUpdate_TripProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TripUpdate.TripProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripUpdate_TripProperties::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TripUpdate_TripProperties::Swap(TripUpdate_TripProperties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TripUpdate_TripProperties::InternalSwap(TripUpdate_TripProperties* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trip_id_.Swap(&other->trip_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_date_.Swap(&other->start_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_time_.Swap(&other->start_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TripUpdate_TripProperties::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gtfs_2drealtime_2eproto);
  return ::file_level_metadata_gtfs_2drealtime_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TripUpdate::InitAsDefaultInstance() {
  ::transit_realtime::_TripUpdate_default_instance_._instance.get_mutable()->trip_ = const_cast< ::transit_realtime::TripDescriptor*>(
      ::transit_realtime::TripDescriptor::internal_default_instance());
  ::transit_realtime::_TripUpdate_default_instance_._instance.get_mutable()->vehicle_ = const_cast< ::transit_realtime::VehicleDescriptor*>(
      ::transit_realtime::VehicleDescriptor::internal_default_instance());
  ::transit_realtime::_TripUpdate_default_instance_._instance.get_mutable()->trip_properties_ = const_cast< ::transit_realtime::TripUpdate_TripProperties*>(
      ::transit_realtime::TripUpdate_TripProperties::internal_default_instance());
}
class TripUpdate::HasBitSetters {
 public:
  static const ::transit_realtime::TripDescriptor& trip(const TripUpdate* msg);
  static void set_has_trip(TripUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::transit_realtime::VehicleDescriptor& vehicle(const TripUpdate* msg);
  static void set_has_vehicle(TripUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_timestamp(TripUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_delay(TripUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::transit_realtime::TripUpdate_TripProperties& trip_properties(const TripUpdate* msg);
  static void set_has_trip_properties(TripUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::transit_realtime::TripDescriptor&
TripUpdate::HasBitSetters::trip(const TripUpdate* msg) {
  return *msg->trip_;
}
const ::transit_realtime::VehicleDescriptor&
TripUpdate::HasBitSetters::vehicle(const TripUpdate* msg) {
  return *msg->vehicle_;
}
const ::transit_realtime::TripUpdate_TripProperties&
TripUpdate::HasBitSetters::trip_properties(const TripUpdate* msg) {
  return *msg->trip_properties_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TripUpdate::kTripFieldNumber;
const int TripUpdate::kVehicleFieldNumber;
const int TripUpdate::kStopTimeUpdateFieldNumber;
const int TripUpdate::kTimestampFieldNumber;
const int TripUpdate::kDelayFieldNumber;
const int TripUpdate::kTripPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TripUpdate::TripUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.TripUpdate)
}
TripUpdate::TripUpdate(const TripUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stop_time_update_(from.stop_time_update_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from.has_trip()) {
    trip_ = new ::transit_realtime::TripDescriptor(*from.trip_);
  } else {
    trip_ = nullptr;
  }
  if (from.has_vehicle()) {
    vehicle_ = new ::transit_realtime::VehicleDescriptor(*from.vehicle_);
  } else {
    vehicle_ = nullptr;
  }
  if (from.has_trip_properties()) {
    trip_properties_ = new ::transit_realtime::TripUpdate_TripProperties(*from.trip_properties_);
  } else {
    trip_properties_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(delay_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TripUpdate)
}

void TripUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TripUpdate_gtfs_2drealtime_2eproto.base);
  ::memset(&trip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_) -
      reinterpret_cast<char*>(&trip_)) + sizeof(delay_));
}

TripUpdate::~TripUpdate() {
  // @@protoc_insertion_point(destructor:transit_realtime.TripUpdate)
  SharedDtor();
}

void TripUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete trip_;
  if (this != internal_default_instance()) delete vehicle_;
  if (this != internal_default_instance()) delete trip_properties_;
}

void TripUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TripUpdate& TripUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TripUpdate_gtfs_2drealtime_2eproto.base);
  return *internal_default_instance();
}


void TripUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TripUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  stop_time_update_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(trip_ != nullptr);
      trip_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vehicle_ != nullptr);
      vehicle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(trip_properties_ != nullptr);
      trip_properties_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delay_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(delay_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TripUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TripUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .transit_realtime.TripDescriptor trip = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::transit_realtime::TripDescriptor::_InternalParse;
        object = msg->mutable_trip();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::transit_realtime::TripUpdate_StopTimeUpdate::_InternalParse;
          object = msg->add_stop_time_update();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional .transit_realtime.VehicleDescriptor vehicle = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::transit_realtime::VehicleDescriptor::_InternalParse;
        object = msg->mutable_vehicle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint64 timestamp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 delay = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_delay(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::transit_realtime::TripUpdate_TripProperties::_InternalParse;
        object = msg->mutable_trip_properties();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
      if ((8000u <= tag && tag < 16000u) ||
          (72000u <= tag && tag < 80000u)) {
        auto res = msg->_extensions_.ParseField(tag, {_InternalParse, msg}, ptr, end,
            internal_default_instance(), &msg->_internal_metadata_, ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
        continue;
      }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TripUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.TripUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .transit_realtime.TripDescriptor trip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stop_time_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.VehicleDescriptor vehicle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 delay = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_delay(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trip_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag && tag < 16000u) ||
            (72000u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.TripUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.TripUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TripUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.TripUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .transit_realtime.TripDescriptor trip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::trip(this), output);
  }

  // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stop_time_update_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->stop_time_update(static_cast<int>(i)),
      output);
  }

  // optional .transit_realtime.VehicleDescriptor vehicle = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::vehicle(this), output);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp(), output);
  }

  // optional int32 delay = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->delay(), output);
  }

  // optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::trip_properties(this), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(1000, 2000, output);

  // Extension range [9000, 10000)
  _extensions_.SerializeWithCachedSizes(9000, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transit_realtime.TripUpdate)
}

::google::protobuf::uint8* TripUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TripUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .transit_realtime.TripDescriptor trip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::trip(this), target);
  }

  // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stop_time_update_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->stop_time_update(static_cast<int>(i)), target);
  }

  // optional .transit_realtime.VehicleDescriptor vehicle = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::vehicle(this), target);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp(), target);
  }

  // optional int32 delay = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->delay(), target);
  }

  // optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::trip_properties(this), target);
  }

  // Extension range [1000, 2000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 2000, target);

  // Extension range [9000, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      9000, 10000, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TripUpdate)
  return target;
}

size_t TripUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TripUpdate)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .transit_realtime.TripDescriptor trip = 1;
  if (has_trip()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trip_);
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stop_time_update_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stop_time_update(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .transit_realtime.VehicleDescriptor vehicle = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vehicle_);
    }

    // optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *trip_properties_);
    }

    // optional uint64 timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional int32 delay = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TripUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.TripUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const TripUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<TripUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.TripUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.TripUpdate)
    MergeFrom(*source);
  }
}

void TripUpdate::MergeFrom(const TripUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TripUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stop_time_update_.MergeFrom(from.stop_time_update_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_trip()->::transit_realtime::TripDescriptor::MergeFrom(from.trip());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_vehicle()->::transit_realtime::VehicleDescriptor::MergeFrom(from.vehicle());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_trip_properties()->::transit_realtime::TripUpdate_TripProperties::MergeFrom(from.trip_properties());
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      delay_ = from.delay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TripUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.TripUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripUpdate::CopyFrom(const TripUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TripUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripUpdate::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stop_time_update())) return false;
  if (has_trip()) {
    if (!this->trip_->IsInitialized()) return false;
  }
  if (has_vehicle()) {
    if (!this->vehicle_->IsInitialized()) return false;
  }
  if (has_trip_properties()) {
    if (!this->trip_properties_->IsInitialized()) return false;
  }
  return true;
}

void TripUpdate::Swap(TripUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TripUpdate::InternalSwap(TripUpdate* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stop_time_update_)->InternalSwap(CastToBase(&other->stop_time_update_));
  swap(trip_, other->trip_);
  swap(vehicle_, other->vehicle_);
  swap(trip_properties_, other->trip_properties_);
  swap(timestamp_, other->timestamp_);
  swap(delay_, other->delay_);
}

::google::protobuf::Metadata TripUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gtfs_2drealtime_2eproto);
  return ::file_level_metadata_gtfs_2drealtime_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VehiclePosition_CarriageDetails::InitAsDefaultInstance() {
}
class VehiclePosition_CarriageDetails::HasBitSetters {
 public:
  static void set_has_id(VehiclePosition_CarriageDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_label(VehiclePosition_CarriageDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_occupancy_status(VehiclePosition_CarriageDetails* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_occupancy_percentage(VehiclePosition_CarriageDetails* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_carriage_sequence(VehiclePosition_CarriageDetails* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehiclePosition_CarriageDetails::kIdFieldNumber;
const int VehiclePosition_CarriageDetails::kLabelFieldNumber;
const int VehiclePosition_CarriageDetails::kOccupancyStatusFieldNumber;
const int VehiclePosition_CarriageDetails::kOccupancyPercentageFieldNumber;
const int VehiclePosition_CarriageDetails::kCarriageSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehiclePosition_CarriageDetails::VehiclePosition_CarriageDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.VehiclePosition.CarriageDetails)
}
VehiclePosition_CarriageDetails::VehiclePosition_CarriageDetails(const VehiclePosition_CarriageDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  ::memcpy(&carriage_sequence_, &from.carriage_sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&occupancy_percentage_) -
    reinterpret_cast<char*>(&carriage_sequence_)) + sizeof(occupancy_percentage_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.VehiclePosition.CarriageDetails)
}

void VehiclePosition_CarriageDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VehiclePosition_CarriageDetails_gtfs_2drealtime_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carriage_sequence_ = 0u;
  occupancy_status_ = 7;
  occupancy_percentage_ = -1;
}

VehiclePosition_CarriageDetails::~VehiclePosition_CarriageDetails() {
  // @@protoc_insertion_point(destructor:transit_realtime.VehiclePosition.CarriageDetails)
  SharedDtor();
}

void VehiclePosition_CarriageDetails::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VehiclePosition_CarriageDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehiclePosition_CarriageDetails& VehiclePosition_CarriageDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VehiclePosition_CarriageDetails_gtfs_2drealtime_2eproto.base);
  return *internal_default_instance();
}


void VehiclePosition_CarriageDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.VehiclePosition.CarriageDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      label_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    carriage_sequence_ = 0u;
    occupancy_status_ = 7;
    occupancy_percentage_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VehiclePosition_CarriageDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VehiclePosition_CarriageDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.VehiclePosition.CarriageDetails.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string label = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.VehiclePosition.CarriageDetails.label");
        object = msg->mutable_label();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::transit_realtime::VehiclePosition_OccupancyStatus_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_occupancy_status(static_cast<::transit_realtime::VehiclePosition_OccupancyStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 occupancy_percentage = 4 [default = -1];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_occupancy_percentage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 carriage_sequence = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_carriage_sequence(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
      if ((8000u <= tag && tag < 16000u) ||
          (72000u <= tag && tag < 80000u)) {
        auto res = msg->_extensions_.ParseField(tag, {_InternalParse, msg}, ptr, end,
            internal_default_instance(), &msg->_internal_metadata_, ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
        continue;
      }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VehiclePosition_CarriageDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.VehiclePosition.CarriageDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.VehiclePosition.CarriageDetails.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string label = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), static_cast<int>(this->label().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.VehiclePosition.CarriageDetails.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::VehiclePosition_OccupancyStatus_IsValid(value)) {
            set_occupancy_status(static_cast< ::transit_realtime::VehiclePosition_OccupancyStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 occupancy_percentage = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_occupancy_percentage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupancy_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 carriage_sequence = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_carriage_sequence(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carriage_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag && tag < 16000u) ||
            (72000u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.VehiclePosition.CarriageDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.VehiclePosition.CarriageDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VehiclePosition_CarriageDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.VehiclePosition.CarriageDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.VehiclePosition.CarriageDetails.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.VehiclePosition.CarriageDetails.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->label(), output);
  }

  // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->occupancy_status(), output);
  }

  // optional int32 occupancy_percentage = 4 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->occupancy_percentage(), output);
  }

  // optional uint32 carriage_sequence = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->carriage_sequence(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(1000, 2000, output);

  // Extension range [9000, 10000)
  _extensions_.SerializeWithCachedSizes(9000, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transit_realtime.VehiclePosition.CarriageDetails)
}

::google::protobuf::uint8* VehiclePosition_CarriageDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.VehiclePosition.CarriageDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.VehiclePosition.CarriageDetails.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.VehiclePosition.CarriageDetails.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->occupancy_status(), target);
  }

  // optional int32 occupancy_percentage = 4 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->occupancy_percentage(), target);
  }

  // optional uint32 carriage_sequence = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->carriage_sequence(), target);
  }

  // Extension range [1000, 2000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 2000, target);

  // Extension range [9000, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      9000, 10000, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.VehiclePosition.CarriageDetails)
  return target;
}

size_t VehiclePosition_CarriageDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.VehiclePosition.CarriageDetails)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string label = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional uint32 carriage_sequence = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->carriage_sequence());
    }

    // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->occupancy_status());
    }

    // optional int32 occupancy_percentage = 4 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupancy_percentage());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehiclePosition_CarriageDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.VehiclePosition.CarriageDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const VehiclePosition_CarriageDetails* source =
      ::google::protobuf::DynamicCastToGenerated<VehiclePosition_CarriageDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.VehiclePosition.CarriageDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.VehiclePosition.CarriageDetails)
    MergeFrom(*source);
  }
}

void VehiclePosition_CarriageDetails::MergeFrom(const VehiclePosition_CarriageDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.VehiclePosition.CarriageDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000004u) {
      carriage_sequence_ = from.carriage_sequence_;
    }
    if (cached_has_bits & 0x00000008u) {
      occupancy_status_ = from.occupancy_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      occupancy_percentage_ = from.occupancy_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehiclePosition_CarriageDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.VehiclePosition.CarriageDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehiclePosition_CarriageDetails::CopyFrom(const VehiclePosition_CarriageDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.VehiclePosition.CarriageDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehiclePosition_CarriageDetails::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void VehiclePosition_CarriageDetails::Swap(VehiclePosition_CarriageDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehiclePosition_CarriageDetails::InternalSwap(VehiclePosition_CarriageDetails* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  label_.Swap(&other->label_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(carriage_sequence_, other->carriage_sequence_);
  swap(occupancy_status_, other->occupancy_status_);
  swap(occupancy_percentage_, other->occupancy_percentage_);
}

::google::protobuf::Metadata VehiclePosition_CarriageDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gtfs_2drealtime_2eproto);
  return ::file_level_metadata_gtfs_2drealtime_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VehiclePosition::InitAsDefaultInstance() {
  ::transit_realtime::_VehiclePosition_default_instance_._instance.get_mutable()->trip_ = const_cast< ::transit_realtime::TripDescriptor*>(
      ::transit_realtime::TripDescriptor::internal_default_instance());
  ::transit_realtime::_VehiclePosition_default_instance_._instance.get_mutable()->vehicle_ = const_cast< ::transit_realtime::VehicleDescriptor*>(
      ::transit_realtime::VehicleDescriptor::internal_default_instance());
  ::transit_realtime::_VehiclePosition_default_instance_._instance.get_mutable()->position_ = const_cast< ::transit_realtime::Position*>(
      ::transit_realtime::Position::internal_default_instance());
}
class VehiclePosition::HasBitSetters {
 public:
  static const ::transit_realtime::TripDescriptor& trip(const VehiclePosition* msg);
  static void set_has_trip(VehiclePosition* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::transit_realtime::VehicleDescriptor& vehicle(const VehiclePosition* msg);
  static void set_has_vehicle(VehiclePosition* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::transit_realtime::Position& position(const VehiclePosition* msg);
  static void set_has_position(VehiclePosition* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_current_stop_sequence(VehiclePosition* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_stop_id(VehiclePosition* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_current_status(VehiclePosition* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_timestamp(VehiclePosition* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_congestion_level(VehiclePosition* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_occupancy_status(VehiclePosition* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_occupancy_percentage(VehiclePosition* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

const ::transit_realtime::TripDescriptor&
VehiclePosition::HasBitSetters::trip(const VehiclePosition* msg) {
  return *msg->trip_;
}
const ::transit_realtime::VehicleDescriptor&
VehiclePosition::HasBitSetters::vehicle(const VehiclePosition* msg) {
  return *msg->vehicle_;
}
const ::transit_realtime::Position&
VehiclePosition::HasBitSetters::position(const VehiclePosition* msg) {
  return *msg->position_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehiclePosition::kTripFieldNumber;
const int VehiclePosition::kVehicleFieldNumber;
const int VehiclePosition::kPositionFieldNumber;
const int VehiclePosition::kCurrentStopSequenceFieldNumber;
const int VehiclePosition::kStopIdFieldNumber;
const int VehiclePosition::kCurrentStatusFieldNumber;
const int VehiclePosition::kTimestampFieldNumber;
const int VehiclePosition::kCongestionLevelFieldNumber;
const int VehiclePosition::kOccupancyStatusFieldNumber;
const int VehiclePosition::kOccupancyPercentageFieldNumber;
const int VehiclePosition::kMultiCarriageDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehiclePosition::VehiclePosition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.VehiclePosition)
}
VehiclePosition::VehiclePosition(const VehiclePosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      multi_carriage_details_(from.multi_carriage_details_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  stop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stop_id()) {
    stop_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stop_id_);
  }
  if (from.has_trip()) {
    trip_ = new ::transit_realtime::TripDescriptor(*from.trip_);
  } else {
    trip_ = nullptr;
  }
  if (from.has_position()) {
    position_ = new ::transit_realtime::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_vehicle()) {
    vehicle_ = new ::transit_realtime::VehicleDescriptor(*from.vehicle_);
  } else {
    vehicle_ = nullptr;
  }
  ::memcpy(&current_stop_sequence_, &from.current_stop_sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_status_) -
    reinterpret_cast<char*>(&current_stop_sequence_)) + sizeof(current_status_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.VehiclePosition)
}

void VehiclePosition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VehiclePosition_gtfs_2drealtime_2eproto.base);
  stop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&occupancy_percentage_) -
      reinterpret_cast<char*>(&trip_)) + sizeof(occupancy_percentage_));
  current_status_ = 2;
}

VehiclePosition::~VehiclePosition() {
  // @@protoc_insertion_point(destructor:transit_realtime.VehiclePosition)
  SharedDtor();
}

void VehiclePosition::SharedDtor() {
  stop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trip_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete vehicle_;
}

void VehiclePosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehiclePosition& VehiclePosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VehiclePosition_gtfs_2drealtime_2eproto.base);
  return *internal_default_instance();
}


void VehiclePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.VehiclePosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  multi_carriage_details_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      stop_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(trip_ != nullptr);
      trip_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(vehicle_ != nullptr);
      vehicle_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&current_stop_sequence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&occupancy_status_) -
        reinterpret_cast<char*>(&current_stop_sequence_)) + sizeof(occupancy_status_));
  }
  if (cached_has_bits & 0x00000300u) {
    occupancy_percentage_ = 0u;
    current_status_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VehiclePosition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VehiclePosition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .transit_realtime.TripDescriptor trip = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::transit_realtime::TripDescriptor::_InternalParse;
        object = msg->mutable_trip();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .transit_realtime.Position position = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::transit_realtime::Position::_InternalParse;
        object = msg->mutable_position();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 current_stop_sequence = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_current_stop_sequence(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::transit_realtime::VehiclePosition_VehicleStopStatus_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_current_status(static_cast<::transit_realtime::VehiclePosition_VehicleStopStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 timestamp = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::transit_realtime::VehiclePosition_CongestionLevel_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(6, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_congestion_level(static_cast<::transit_realtime::VehiclePosition_CongestionLevel>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string stop_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.VehiclePosition.stop_id");
        object = msg->mutable_stop_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .transit_realtime.VehicleDescriptor vehicle = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::transit_realtime::VehicleDescriptor::_InternalParse;
        object = msg->mutable_vehicle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::transit_realtime::VehiclePosition_OccupancyStatus_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(9, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_occupancy_status(static_cast<::transit_realtime::VehiclePosition_OccupancyStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 occupancy_percentage = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_occupancy_percentage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::transit_realtime::VehiclePosition_CarriageDetails::_InternalParse;
          object = msg->add_multi_carriage_details();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
      if ((8000u <= tag && tag < 16000u) ||
          (72000u <= tag && tag < 80000u)) {
        auto res = msg->_extensions_.ParseField(tag, {_InternalParse, msg}, ptr, end,
            internal_default_instance(), &msg->_internal_metadata_, ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
        continue;
      }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VehiclePosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.VehiclePosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .transit_realtime.TripDescriptor trip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.Position position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 current_stop_sequence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_current_stop_sequence(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_stop_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::VehiclePosition_VehicleStopStatus_IsValid(value)) {
            set_current_status(static_cast< ::transit_realtime::VehiclePosition_VehicleStopStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::VehiclePosition_CongestionLevel_IsValid(value)) {
            set_congestion_level(static_cast< ::transit_realtime::VehiclePosition_CongestionLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stop_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stop_id().data(), static_cast<int>(this->stop_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.VehiclePosition.stop_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.VehicleDescriptor vehicle = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::VehiclePosition_OccupancyStatus_IsValid(value)) {
            set_occupancy_status(static_cast< ::transit_realtime::VehiclePosition_OccupancyStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 occupancy_percentage = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_occupancy_percentage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &occupancy_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_multi_carriage_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag && tag < 16000u) ||
            (72000u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.VehiclePosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.VehiclePosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VehiclePosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.VehiclePosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .transit_realtime.TripDescriptor trip = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::trip(this), output);
  }

  // optional .transit_realtime.Position position = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::position(this), output);
  }

  // optional uint32 current_stop_sequence = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current_stop_sequence(), output);
  }

  // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->current_status(), output);
  }

  // optional uint64 timestamp = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->congestion_level(), output);
  }

  // optional string stop_id = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stop_id().data(), static_cast<int>(this->stop_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.VehiclePosition.stop_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->stop_id(), output);
  }

  // optional .transit_realtime.VehicleDescriptor vehicle = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::vehicle(this), output);
  }

  // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->occupancy_status(), output);
  }

  // optional uint32 occupancy_percentage = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->occupancy_percentage(), output);
  }

  // repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->multi_carriage_details_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->multi_carriage_details(static_cast<int>(i)),
      output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(1000, 2000, output);

  // Extension range [9000, 10000)
  _extensions_.SerializeWithCachedSizes(9000, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transit_realtime.VehiclePosition)
}

::google::protobuf::uint8* VehiclePosition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.VehiclePosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .transit_realtime.TripDescriptor trip = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::trip(this), target);
  }

  // optional .transit_realtime.Position position = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::position(this), target);
  }

  // optional uint32 current_stop_sequence = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->current_stop_sequence(), target);
  }

  // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->current_status(), target);
  }

  // optional uint64 timestamp = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->congestion_level(), target);
  }

  // optional string stop_id = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stop_id().data(), static_cast<int>(this->stop_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.VehiclePosition.stop_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->stop_id(), target);
  }

  // optional .transit_realtime.VehicleDescriptor vehicle = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::vehicle(this), target);
  }

  // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->occupancy_status(), target);
  }

  // optional uint32 occupancy_percentage = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->occupancy_percentage(), target);
  }

  // repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->multi_carriage_details_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->multi_carriage_details(static_cast<int>(i)), target);
  }

  // Extension range [1000, 2000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 2000, target);

  // Extension range [9000, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      9000, 10000, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.VehiclePosition)
  return target;
}

size_t VehiclePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.VehiclePosition)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->multi_carriage_details_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->multi_carriage_details(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string stop_id = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_id());
    }

    // optional .transit_realtime.TripDescriptor trip = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *trip_);
    }

    // optional .transit_realtime.Position position = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .transit_realtime.VehicleDescriptor vehicle = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vehicle_);
    }

    // optional uint32 current_stop_sequence = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_stop_sequence());
    }

    // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->congestion_level());
    }

    // optional uint64 timestamp = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->occupancy_status());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 occupancy_percentage = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->occupancy_percentage());
    }

    // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->current_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehiclePosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.VehiclePosition)
  GOOGLE_DCHECK_NE(&from, this);
  const VehiclePosition* source =
      ::google::protobuf::DynamicCastToGenerated<VehiclePosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.VehiclePosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.VehiclePosition)
    MergeFrom(*source);
  }
}

void VehiclePosition::MergeFrom(const VehiclePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.VehiclePosition)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multi_carriage_details_.MergeFrom(from.multi_carriage_details_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      stop_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stop_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_trip()->::transit_realtime::TripDescriptor::MergeFrom(from.trip());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_position()->::transit_realtime::Position::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_vehicle()->::transit_realtime::VehicleDescriptor::MergeFrom(from.vehicle());
    }
    if (cached_has_bits & 0x00000010u) {
      current_stop_sequence_ = from.current_stop_sequence_;
    }
    if (cached_has_bits & 0x00000020u) {
      congestion_level_ = from.congestion_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      occupancy_status_ = from.occupancy_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      occupancy_percentage_ = from.occupancy_percentage_;
    }
    if (cached_has_bits & 0x00000200u) {
      current_status_ = from.current_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehiclePosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.VehiclePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehiclePosition::CopyFrom(const VehiclePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.VehiclePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehiclePosition::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::google::protobuf::internal::AllAreInitialized(this->multi_carriage_details())) return false;
  if (has_trip()) {
    if (!this->trip_->IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position_->IsInitialized()) return false;
  }
  if (has_vehicle()) {
    if (!this->vehicle_->IsInitialized()) return false;
  }
  return true;
}

void VehiclePosition::Swap(VehiclePosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehiclePosition::InternalSwap(VehiclePosition* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&multi_carriage_details_)->InternalSwap(CastToBase(&other->multi_carriage_details_));
  stop_id_.Swap(&other->stop_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trip_, other->trip_);
  swap(position_, other->position_);
  swap(vehicle_, other->vehicle_);
  swap(current_stop_sequence_, other->current_stop_sequence_);
  swap(congestion_level_, other->congestion_level_);
  swap(timestamp_, other->timestamp_);
  swap(occupancy_status_, other->occupancy_status_);
  swap(occupancy_percentage_, other->occupancy_percentage_);
  swap(current_status_, other->current_status_);
}

::google::protobuf::Metadata VehiclePosition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gtfs_2drealtime_2eproto);
  return ::file_level_metadata_gtfs_2drealtime_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Alert::InitAsDefaultInstance() {
  ::transit_realtime::_Alert_default_instance_._instance.get_mutable()->url_ = const_cast< ::transit_realtime::TranslatedString*>(
      ::transit_realtime::TranslatedString::internal_default_instance());
  ::transit_realtime::_Alert_default_instance_._instance.get_mutable()->header_text_ = const_cast< ::transit_realtime::TranslatedString*>(
      ::transit_realtime::TranslatedString::internal_default_instance());
  ::transit_realtime::_Alert_default_instance_._instance.get_mutable()->description_text_ = const_cast< ::transit_realtime::TranslatedString*>(
      ::transit_realtime::TranslatedString::internal_default_instance());
  ::transit_realtime::_Alert_default_instance_._instance.get_mutable()->tts_header_text_ = const_cast< ::transit_realtime::TranslatedString*>(
      ::transit_realtime::TranslatedString::internal_default_instance());
  ::transit_realtime::_Alert_default_instance_._instance.get_mutable()->tts_description_text_ = const_cast< ::transit_realtime::TranslatedString*>(
      ::transit_realtime::TranslatedString::internal_default_instance());
}
class Alert::HasBitSetters {
 public:
  static void set_has_cause(Alert* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_effect(Alert* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static const ::transit_realtime::TranslatedString& url(const Alert* msg);
  static void set_has_url(Alert* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::transit_realtime::TranslatedString& header_text(const Alert* msg);
  static void set_has_header_text(Alert* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::transit_realtime::TranslatedString& description_text(const Alert* msg);
  static void set_has_description_text(Alert* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::transit_realtime::TranslatedString& tts_header_text(const Alert* msg);
  static void set_has_tts_header_text(Alert* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::transit_realtime::TranslatedString& tts_description_text(const Alert* msg);
  static void set_has_tts_description_text(Alert* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_severity_level(Alert* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

const ::transit_realtime::TranslatedString&
Alert::HasBitSetters::url(const Alert* msg) {
  return *msg->url_;
}
const ::transit_realtime::TranslatedString&
Alert::HasBitSetters::header_text(const Alert* msg) {
  return *msg->header_text_;
}
const ::transit_realtime::TranslatedString&
Alert::HasBitSetters::description_text(const Alert* msg) {
  return *msg->description_text_;
}
const ::transit_realtime::TranslatedString&
Alert::HasBitSetters::tts_header_text(const Alert* msg) {
  return *msg->tts_header_text_;
}
const ::transit_realtime::TranslatedString&
Alert::HasBitSetters::tts_description_text(const Alert* msg) {
  return *msg->tts_description_text_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Alert::kActivePeriodFieldNumber;
const int Alert::kInformedEntityFieldNumber;
const int Alert::kCauseFieldNumber;
const int Alert::kEffectFieldNumber;
const int Alert::kUrlFieldNumber;
const int Alert::kHeaderTextFieldNumber;
const int Alert::kDescriptionTextFieldNumber;
const int Alert::kTtsHeaderTextFieldNumber;
const int Alert::kTtsDescriptionTextFieldNumber;
const int Alert::kSeverityLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Alert::Alert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.Alert)
}
Alert::Alert(const Alert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      active_period_(from.active_period_),
      informed_entity_(from.informed_entity_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from.has_url()) {
    url_ = new ::transit_realtime::TranslatedString(*from.url_);
  } else {
    url_ = nullptr;
  }
  if (from.has_header_text()) {
    header_text_ = new ::transit_realtime::TranslatedString(*from.header_text_);
  } else {
    header_text_ = nullptr;
  }
  if (from.has_description_text()) {
    description_text_ = new ::transit_realtime::TranslatedString(*from.description_text_);
  } else {
    description_text_ = nullptr;
  }
  if (from.has_tts_header_text()) {
    tts_header_text_ = new ::transit_realtime::TranslatedString(*from.tts_header_text_);
  } else {
    tts_header_text_ = nullptr;
  }
  if (from.has_tts_description_text()) {
    tts_description_text_ = new ::transit_realtime::TranslatedString(*from.tts_description_text_);
  } else {
    tts_description_text_ = nullptr;
  }
  ::memcpy(&severity_level_, &from.severity_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&effect_) -
    reinterpret_cast<char*>(&severity_level_)) + sizeof(effect_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.Alert)
}

void Alert::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Alert_gtfs_2drealtime_2eproto.base);
  ::memset(&url_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tts_description_text_) -
      reinterpret_cast<char*>(&url_)) + sizeof(tts_description_text_));
  severity_level_ = 1;
  cause_ = 1;
  effect_ = 8;
}

Alert::~Alert() {
  // @@protoc_insertion_point(destructor:transit_realtime.Alert)
  SharedDtor();
}

void Alert::SharedDtor() {
  if (this != internal_default_instance()) delete url_;
  if (this != internal_default_instance()) delete header_text_;
  if (this != internal_default_instance()) delete description_text_;
  if (this != internal_default_instance()) delete tts_header_text_;
  if (this != internal_default_instance()) delete tts_description_text_;
}

void Alert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Alert& Alert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Alert_gtfs_2drealtime_2eproto.base);
  return *internal_default_instance();
}


void Alert::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.Alert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  active_period_.Clear();
  informed_entity_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(url_ != nullptr);
      url_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_text_ != nullptr);
      header_text_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(description_text_ != nullptr);
      description_text_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tts_header_text_ != nullptr);
      tts_header_text_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tts_description_text_ != nullptr);
      tts_description_text_->Clear();
    }
    severity_level_ = 1;
    cause_ = 1;
    effect_ = 8;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Alert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Alert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .transit_realtime.TimeRange active_period = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::transit_realtime::TimeRange::_InternalParse;
          object = msg->add_active_period();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .transit_realtime.EntitySelector informed_entity = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::transit_realtime::EntitySelector::_InternalParse;
          object = msg->add_informed_entity();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::transit_realtime::Alert_Cause_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(6, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_cause(static_cast<::transit_realtime::Alert_Cause>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::transit_realtime::Alert_Effect_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(7, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_effect(static_cast<::transit_realtime::Alert_Effect>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .transit_realtime.TranslatedString url = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::transit_realtime::TranslatedString::_InternalParse;
        object = msg->mutable_url();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .transit_realtime.TranslatedString header_text = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::transit_realtime::TranslatedString::_InternalParse;
        object = msg->mutable_header_text();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .transit_realtime.TranslatedString description_text = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::transit_realtime::TranslatedString::_InternalParse;
        object = msg->mutable_description_text();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .transit_realtime.TranslatedString tts_header_text = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::transit_realtime::TranslatedString::_InternalParse;
        object = msg->mutable_tts_header_text();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .transit_realtime.TranslatedString tts_description_text = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::transit_realtime::TranslatedString::_InternalParse;
        object = msg->mutable_tts_description_text();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .transit_realtime.Alert.SeverityLevel severity_level = 14 [default = UNKNOWN_SEVERITY];
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::transit_realtime::Alert_SeverityLevel_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(14, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_severity_level(static_cast<::transit_realtime::Alert_SeverityLevel>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
      if ((8000u <= tag && tag < 16000u) ||
          (72000u <= tag && tag < 80000u)) {
        auto res = msg->_extensions_.ParseField(tag, {_InternalParse, msg}, ptr, end,
            internal_default_instance(), &msg->_internal_metadata_, ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
        continue;
      }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Alert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.Alert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .transit_realtime.TimeRange active_period = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_active_period()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .transit_realtime.EntitySelector informed_entity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_informed_entity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::Alert_Cause_IsValid(value)) {
            set_cause(static_cast< ::transit_realtime::Alert_Cause >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::Alert_Effect_IsValid(value)) {
            set_effect(static_cast< ::transit_realtime::Alert_Effect >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.TranslatedString url = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.TranslatedString header_text = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.TranslatedString description_text = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_description_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.TranslatedString tts_header_text = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tts_header_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.TranslatedString tts_description_text = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tts_description_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.Alert.SeverityLevel severity_level = 14 [default = UNKNOWN_SEVERITY];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::Alert_SeverityLevel_IsValid(value)) {
            set_severity_level(static_cast< ::transit_realtime::Alert_SeverityLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag && tag < 16000u) ||
            (72000u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.Alert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.Alert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Alert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.Alert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .transit_realtime.TimeRange active_period = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->active_period_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->active_period(static_cast<int>(i)),
      output);
  }

  // repeated .transit_realtime.EntitySelector informed_entity = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->informed_entity_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->informed_entity(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->cause(), output);
  }

  // optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->effect(), output);
  }

  // optional .transit_realtime.TranslatedString url = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::url(this), output);
  }

  // optional .transit_realtime.TranslatedString header_text = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::header_text(this), output);
  }

  // optional .transit_realtime.TranslatedString description_text = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::description_text(this), output);
  }

  // optional .transit_realtime.TranslatedString tts_header_text = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::tts_header_text(this), output);
  }

  // optional .transit_realtime.TranslatedString tts_description_text = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::tts_description_text(this), output);
  }

  // optional .transit_realtime.Alert.SeverityLevel severity_level = 14 [default = UNKNOWN_SEVERITY];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->severity_level(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(1000, 2000, output);

  // Extension range [9000, 10000)
  _extensions_.SerializeWithCachedSizes(9000, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transit_realtime.Alert)
}

::google::protobuf::uint8* Alert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.Alert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .transit_realtime.TimeRange active_period = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->active_period_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->active_period(static_cast<int>(i)), target);
  }

  // repeated .transit_realtime.EntitySelector informed_entity = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->informed_entity_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->informed_entity(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->cause(), target);
  }

  // optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->effect(), target);
  }

  // optional .transit_realtime.TranslatedString url = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::url(this), target);
  }

  // optional .transit_realtime.TranslatedString header_text = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::header_text(this), target);
  }

  // optional .transit_realtime.TranslatedString description_text = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::description_text(this), target);
  }

  // optional .transit_realtime.TranslatedString tts_header_text = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::tts_header_text(this), target);
  }

  // optional .transit_realtime.TranslatedString tts_description_text = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::tts_description_text(this), target);
  }

  // optional .transit_realtime.Alert.SeverityLevel severity_level = 14 [default = UNKNOWN_SEVERITY];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->severity_level(), target);
  }

  // Extension range [1000, 2000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 2000, target);

  // Extension range [9000, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      9000, 10000, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.Alert)
  return target;
}

size_t Alert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.Alert)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transit_realtime.TimeRange active_period = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->active_period_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->active_period(static_cast<int>(i)));
    }
  }

  // repeated .transit_realtime.EntitySelector informed_entity = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->informed_entity_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->informed_entity(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .transit_realtime.TranslatedString url = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *url_);
    }

    // optional .transit_realtime.TranslatedString header_text = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_text_);
    }

    // optional .transit_realtime.TranslatedString description_text = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *description_text_);
    }

    // optional .transit_realtime.TranslatedString tts_header_text = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tts_header_text_);
    }

    // optional .transit_realtime.TranslatedString tts_description_text = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tts_description_text_);
    }

    // optional .transit_realtime.Alert.SeverityLevel severity_level = 14 [default = UNKNOWN_SEVERITY];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity_level());
    }

    // optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cause());
    }

    // optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Alert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.Alert)
  GOOGLE_DCHECK_NE(&from, this);
  const Alert* source =
      ::google::protobuf::DynamicCastToGenerated<Alert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.Alert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.Alert)
    MergeFrom(*source);
  }
}

void Alert::MergeFrom(const Alert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.Alert)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  active_period_.MergeFrom(from.active_period_);
  informed_entity_.MergeFrom(from.informed_entity_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_url()->::transit_realtime::TranslatedString::MergeFrom(from.url());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header_text()->::transit_realtime::TranslatedString::MergeFrom(from.header_text());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_description_text()->::transit_realtime::TranslatedString::MergeFrom(from.description_text());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_tts_header_text()->::transit_realtime::TranslatedString::MergeFrom(from.tts_header_text());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_tts_description_text()->::transit_realtime::TranslatedString::MergeFrom(from.tts_description_text());
    }
    if (cached_has_bits & 0x00000020u) {
      severity_level_ = from.severity_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      cause_ = from.cause_;
    }
    if (cached_has_bits & 0x00000080u) {
      effect_ = from.effect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Alert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.Alert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alert::CopyFrom(const Alert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.Alert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alert::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::google::protobuf::internal::AllAreInitialized(this->active_period())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->informed_entity())) return false;
  if (has_url()) {
    if (!this->url_->IsInitialized()) return false;
  }
  if (has_header_text()) {
    if (!this->header_text_->IsInitialized()) return false;
  }
  if (has_description_text()) {
    if (!this->description_text_->IsInitialized()) return false;
  }
  if (has_tts_header_text()) {
    if (!this->tts_header_text_->IsInitialized()) return false;
  }
  if (has_tts_description_text()) {
    if (!this->tts_description_text_->IsInitialized()) return false;
  }
  return true;
}

void Alert::Swap(Alert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Alert::InternalSwap(Alert* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&active_period_)->InternalSwap(CastToBase(&other->active_period_));
  CastToBase(&informed_entity_)->InternalSwap(CastToBase(&other->informed_entity_));
  swap(url_, other->url_);
  swap(header_text_, other->header_text_);
  swap(description_text_, other->description_text_);
  swap(tts_header_text_, other->tts_header_text_);
  swap(tts_description_text_, other->tts_description_text_);
  swap(severity_level_, other->severity_level_);
  swap(cause_, other->cause_);
  swap(effect_, other->effect_);
}

::google::protobuf::Metadata Alert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gtfs_2drealtime_2eproto);
  return ::file_level_metadata_gtfs_2drealtime_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TimeRange::InitAsDefaultInstance() {
}
class TimeRange::HasBitSetters {
 public:
  static void set_has_start(TimeRange* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_end(TimeRange* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeRange::kStartFieldNumber;
const int TimeRange::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeRange::TimeRange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.TimeRange)
}
TimeRange::TimeRange(const TimeRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TimeRange)
}

void TimeRange::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

TimeRange::~TimeRange() {
  // @@protoc_insertion_point(destructor:transit_realtime.TimeRange)
  SharedDtor();
}

void TimeRange::SharedDtor() {
}

void TimeRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeRange& TimeRange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TimeRange_gtfs_2drealtime_2eproto.base);
  return *internal_default_instance();
}


void TimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TimeRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_) -
        reinterpret_cast<char*>(&start_)) + sizeof(end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TimeRange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TimeRange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 start = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_start(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 end = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_end(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
      if ((8000u <= tag && tag < 16000u) ||
          (72000u <= tag && tag < 80000u)) {
        auto res = msg->_extensions_.ParseField(tag, {_InternalParse, msg}, ptr, end,
            internal_default_instance(), &msg->_internal_metadata_, ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
        continue;
      }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TimeRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.TimeRange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_start(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_end(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag && tag < 16000u) ||
            (72000u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.TimeRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.TimeRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TimeRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.TimeRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start(), output);
  }

  // optional uint64 end = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(1000, 2000, output);

  // Extension range [9000, 10000)
  _extensions_.SerializeWithCachedSizes(9000, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transit_realtime.TimeRange)
}

::google::protobuf::uint8* TimeRange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TimeRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start(), target);
  }

  // optional uint64 end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end(), target);
  }

  // Extension range [1000, 2000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 2000, target);

  // Extension range [9000, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      9000, 10000, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TimeRange)
  return target;
}

size_t TimeRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TimeRange)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start());
    }

    // optional uint64 end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.TimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeRange* source =
      ::google::protobuf::DynamicCastToGenerated<TimeRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.TimeRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.TimeRange)
    MergeFrom(*source);
  }
}

void TimeRange::MergeFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_ = from.end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimeRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeRange::CopyFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRange::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TimeRange::Swap(TimeRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeRange::InternalSwap(TimeRange* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_, other->start_);
  swap(end_, other->end_);
}

::google::protobuf::Metadata TimeRange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gtfs_2drealtime_2eproto);
  return ::file_level_metadata_gtfs_2drealtime_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
class Position::HasBitSetters {
 public:
  static void set_has_latitude(Position* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_longitude(Position* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_bearing(Position* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_odometer(Position* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_speed(Position* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kLatitudeFieldNumber;
const int Position::kLongitudeFieldNumber;
const int Position::kBearingFieldNumber;
const int Position::kOdometerFieldNumber;
const int Position::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.Position)
}
Position::Position(const Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.Position)
}

void Position::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(speed_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:transit_realtime.Position)
  SharedDtor();
}

void Position::SharedDtor() {
}

void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Position_gtfs_2drealtime_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Position::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Position*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required float latitude = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_latitude(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float longitude = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_longitude(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float bearing = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_bearing(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional double odometer = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_odometer(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional float speed = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_speed(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
      if ((8000u <= tag && tag < 16000u) ||
          (72000u <= tag && tag < 80000u)) {
        auto res = msg->_extensions_.ParseField(tag, {_InternalParse, msg}, ptr, end,
            internal_default_instance(), &msg->_internal_metadata_, ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
        continue;
      }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.Position)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float latitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_latitude(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_longitude(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bearing = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_bearing(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bearing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double odometer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_odometer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odometer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_speed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag && tag < 16000u) ||
            (72000u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.Position)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->latitude(), output);
  }

  // required float longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  // optional float bearing = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bearing(), output);
  }

  // optional double odometer = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->odometer(), output);
  }

  // optional float speed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(1000, 2000, output);

  // Extension range [9000, 10000)
  _extensions_.SerializeWithCachedSizes(9000, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transit_realtime.Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->latitude(), target);
  }

  // required float longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  // optional float bearing = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bearing(), target);
  }

  // optional double odometer = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->odometer(), target);
  }

  // optional float speed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed(), target);
  }

  // Extension range [1000, 2000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 2000, target);

  // Extension range [9000, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      9000, 10000, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.Position)
  return target;
}

size_t Position::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:transit_realtime.Position)
  size_t total_size = 0;

  if (has_latitude()) {
    // required float latitude = 1;
    total_size += 1 + 4;
  }

  if (has_longitude()) {
    // required float longitude = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.Position)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float latitude = 1;
    total_size += 1 + 4;

    // required float longitude = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional double odometer = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional float bearing = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float speed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::google::protobuf::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      odometer_ = from.odometer_;
    }
    if (cached_has_bits & 0x00000008u) {
      bearing_ = from.bearing_;
    }
    if (cached_has_bits & 0x00000010u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(odometer_, other->odometer_);
  swap(bearing_, other->bearing_);
  swap(speed_, other->speed_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gtfs_2drealtime_2eproto);
  return ::file_level_metadata_gtfs_2drealtime_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TripDescriptor::InitAsDefaultInstance() {
}
class TripDescriptor::HasBitSetters {
 public:
  static void set_has_trip_id(TripDescriptor* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_route_id(TripDescriptor* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_direction_id(TripDescriptor* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_start_time(TripDescriptor* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_start_date(TripDescriptor* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_schedule_relationship(TripDescriptor* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TripDescriptor::kTripIdFieldNumber;
const int TripDescriptor::kRouteIdFieldNumber;
const int TripDescriptor::kDirectionIdFieldNumber;
const int TripDescriptor::kStartTimeFieldNumber;
const int TripDescriptor::kStartDateFieldNumber;
const int TripDescriptor::kScheduleRelationshipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TripDescriptor::TripDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.TripDescriptor)
}
TripDescriptor::TripDescriptor(const TripDescriptor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  trip_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trip_id()) {
    trip_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trip_id_);
  }
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_time()) {
    start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_);
  }
  start_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_date()) {
    start_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_date_);
  }
  route_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_route_id()) {
    route_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_id_);
  }
  ::memcpy(&schedule_relationship_, &from.schedule_relationship_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_id_) -
    reinterpret_cast<char*>(&schedule_relationship_)) + sizeof(direction_id_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TripDescriptor)
}

void TripDescriptor::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TripDescriptor_gtfs_2drealtime_2eproto.base);
  trip_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&schedule_relationship_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_id_) -
      reinterpret_cast<char*>(&schedule_relationship_)) + sizeof(direction_id_));
}

TripDescriptor::~TripDescriptor() {
  // @@protoc_insertion_point(destructor:transit_realtime.TripDescriptor)
  SharedDtor();
}

void TripDescriptor::SharedDtor() {
  trip_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TripDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TripDescriptor& TripDescriptor::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TripDescriptor_gtfs_2drealtime_2eproto.base);
  return *internal_default_instance();
}


void TripDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TripDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      trip_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      start_time_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      start_date_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      route_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&schedule_relationship_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&direction_id_) -
        reinterpret_cast<char*>(&schedule_relationship_)) + sizeof(direction_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TripDescriptor::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TripDescriptor*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string trip_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.TripDescriptor.trip_id");
        object = msg->mutable_trip_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string start_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.TripDescriptor.start_time");
        object = msg->mutable_start_time();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string start_date = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.TripDescriptor.start_date");
        object = msg->mutable_start_date();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::transit_realtime::TripDescriptor_ScheduleRelationship_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_schedule_relationship(static_cast<::transit_realtime::TripDescriptor_ScheduleRelationship>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string route_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.TripDescriptor.route_id");
        object = msg->mutable_route_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 direction_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_direction_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
      if ((8000u <= tag && tag < 16000u) ||
          (72000u <= tag && tag < 80000u)) {
        auto res = msg->_extensions_.ParseField(tag, {_InternalParse, msg}, ptr, end,
            internal_default_instance(), &msg->_internal_metadata_, ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
        continue;
      }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TripDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.TripDescriptor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string trip_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trip_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trip_id().data(), static_cast<int>(this->trip_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.TripDescriptor.trip_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string start_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_time().data(), static_cast<int>(this->start_time().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.TripDescriptor.start_time");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string start_date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_date().data(), static_cast<int>(this->start_date().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.TripDescriptor.start_date");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::TripDescriptor_ScheduleRelationship_IsValid(value)) {
            set_schedule_relationship(static_cast< ::transit_realtime::TripDescriptor_ScheduleRelationship >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string route_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->route_id().data(), static_cast<int>(this->route_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.TripDescriptor.route_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 direction_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_direction_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag && tag < 16000u) ||
            (72000u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.TripDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.TripDescriptor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TripDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.TripDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string trip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trip_id().data(), static_cast<int>(this->trip_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripDescriptor.trip_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->trip_id(), output);
  }

  // optional string start_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_time().data(), static_cast<int>(this->start_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripDescriptor.start_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->start_time(), output);
  }

  // optional string start_date = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_date().data(), static_cast<int>(this->start_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripDescriptor.start_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->start_date(), output);
  }

  // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->schedule_relationship(), output);
  }

  // optional string route_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->route_id().data(), static_cast<int>(this->route_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripDescriptor.route_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->route_id(), output);
  }

  // optional uint32 direction_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->direction_id(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(1000, 2000, output);

  // Extension range [9000, 10000)
  _extensions_.SerializeWithCachedSizes(9000, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transit_realtime.TripDescriptor)
}

::google::protobuf::uint8* TripDescriptor::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TripDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string trip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trip_id().data(), static_cast<int>(this->trip_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripDescriptor.trip_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trip_id(), target);
  }

  // optional string start_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_time().data(), static_cast<int>(this->start_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripDescriptor.start_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->start_time(), target);
  }

  // optional string start_date = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_date().data(), static_cast<int>(this->start_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripDescriptor.start_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->start_date(), target);
  }

  // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->schedule_relationship(), target);
  }

  // optional string route_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->route_id().data(), static_cast<int>(this->route_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TripDescriptor.route_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->route_id(), target);
  }

  // optional uint32 direction_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->direction_id(), target);
  }

  // Extension range [1000, 2000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 2000, target);

  // Extension range [9000, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      9000, 10000, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TripDescriptor)
  return target;
}

size_t TripDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TripDescriptor)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string trip_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trip_id());
    }

    // optional string start_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_time());
    }

    // optional string start_date = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_date());
    }

    // optional string route_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->route_id());
    }

    // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->schedule_relationship());
    }

    // optional uint32 direction_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direction_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TripDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.TripDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const TripDescriptor* source =
      ::google::protobuf::DynamicCastToGenerated<TripDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.TripDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.TripDescriptor)
    MergeFrom(*source);
  }
}

void TripDescriptor::MergeFrom(const TripDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TripDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      trip_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trip_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      start_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_date_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      route_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      schedule_relationship_ = from.schedule_relationship_;
    }
    if (cached_has_bits & 0x00000020u) {
      direction_id_ = from.direction_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TripDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.TripDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripDescriptor::CopyFrom(const TripDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TripDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripDescriptor::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TripDescriptor::Swap(TripDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TripDescriptor::InternalSwap(TripDescriptor* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trip_id_.Swap(&other->trip_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_time_.Swap(&other->start_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_date_.Swap(&other->start_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  route_id_.Swap(&other->route_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(schedule_relationship_, other->schedule_relationship_);
  swap(direction_id_, other->direction_id_);
}

::google::protobuf::Metadata TripDescriptor::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gtfs_2drealtime_2eproto);
  return ::file_level_metadata_gtfs_2drealtime_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VehicleDescriptor::InitAsDefaultInstance() {
}
class VehicleDescriptor::HasBitSetters {
 public:
  static void set_has_id(VehicleDescriptor* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_label(VehicleDescriptor* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_license_plate(VehicleDescriptor* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleDescriptor::kIdFieldNumber;
const int VehicleDescriptor::kLabelFieldNumber;
const int VehicleDescriptor::kLicensePlateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleDescriptor::VehicleDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.VehicleDescriptor)
}
VehicleDescriptor::VehicleDescriptor(const VehicleDescriptor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  license_plate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_license_plate()) {
    license_plate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.license_plate_);
  }
  // @@protoc_insertion_point(copy_constructor:transit_realtime.VehicleDescriptor)
}

void VehicleDescriptor::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VehicleDescriptor_gtfs_2drealtime_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_plate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VehicleDescriptor::~VehicleDescriptor() {
  // @@protoc_insertion_point(destructor:transit_realtime.VehicleDescriptor)
  SharedDtor();
}

void VehicleDescriptor::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_plate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VehicleDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleDescriptor& VehicleDescriptor::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VehicleDescriptor_gtfs_2drealtime_2eproto.base);
  return *internal_default_instance();
}


void VehicleDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.VehicleDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      label_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      license_plate_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VehicleDescriptor::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VehicleDescriptor*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.VehicleDescriptor.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string label = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.VehicleDescriptor.label");
        object = msg->mutable_label();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string license_plate = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.VehicleDescriptor.license_plate");
        object = msg->mutable_license_plate();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
      if ((8000u <= tag && tag < 16000u) ||
          (72000u <= tag && tag < 80000u)) {
        auto res = msg->_extensions_.ParseField(tag, {_InternalParse, msg}, ptr, end,
            internal_default_instance(), &msg->_internal_metadata_, ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
        continue;
      }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VehicleDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.VehicleDescriptor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.VehicleDescriptor.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string label = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), static_cast<int>(this->label().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.VehicleDescriptor.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string license_plate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_license_plate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->license_plate().data(), static_cast<int>(this->license_plate().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.VehicleDescriptor.license_plate");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag && tag < 16000u) ||
            (72000u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.VehicleDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.VehicleDescriptor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VehicleDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.VehicleDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.VehicleDescriptor.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.VehicleDescriptor.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->label(), output);
  }

  // optional string license_plate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license_plate().data(), static_cast<int>(this->license_plate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.VehicleDescriptor.license_plate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->license_plate(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(1000, 2000, output);

  // Extension range [9000, 10000)
  _extensions_.SerializeWithCachedSizes(9000, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transit_realtime.VehicleDescriptor)
}

::google::protobuf::uint8* VehicleDescriptor::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.VehicleDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.VehicleDescriptor.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.VehicleDescriptor.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // optional string license_plate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license_plate().data(), static_cast<int>(this->license_plate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.VehicleDescriptor.license_plate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->license_plate(), target);
  }

  // Extension range [1000, 2000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 2000, target);

  // Extension range [9000, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      9000, 10000, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.VehicleDescriptor)
  return target;
}

size_t VehicleDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.VehicleDescriptor)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string label = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string license_plate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->license_plate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.VehicleDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleDescriptor* source =
      ::google::protobuf::DynamicCastToGenerated<VehicleDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.VehicleDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.VehicleDescriptor)
    MergeFrom(*source);
  }
}

void VehicleDescriptor::MergeFrom(const VehicleDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.VehicleDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      license_plate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.license_plate_);
    }
  }
}

void VehicleDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.VehicleDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleDescriptor::CopyFrom(const VehicleDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.VehicleDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleDescriptor::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void VehicleDescriptor::Swap(VehicleDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleDescriptor::InternalSwap(VehicleDescriptor* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  label_.Swap(&other->label_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  license_plate_.Swap(&other->license_plate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata VehicleDescriptor::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gtfs_2drealtime_2eproto);
  return ::file_level_metadata_gtfs_2drealtime_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EntitySelector::InitAsDefaultInstance() {
  ::transit_realtime::_EntitySelector_default_instance_._instance.get_mutable()->trip_ = const_cast< ::transit_realtime::TripDescriptor*>(
      ::transit_realtime::TripDescriptor::internal_default_instance());
}
class EntitySelector::HasBitSetters {
 public:
  static void set_has_agency_id(EntitySelector* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_route_id(EntitySelector* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_route_type(EntitySelector* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::transit_realtime::TripDescriptor& trip(const EntitySelector* msg);
  static void set_has_trip(EntitySelector* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_stop_id(EntitySelector* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_direction_id(EntitySelector* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

const ::transit_realtime::TripDescriptor&
EntitySelector::HasBitSetters::trip(const EntitySelector* msg) {
  return *msg->trip_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntitySelector::kAgencyIdFieldNumber;
const int EntitySelector::kRouteIdFieldNumber;
const int EntitySelector::kRouteTypeFieldNumber;
const int EntitySelector::kTripFieldNumber;
const int EntitySelector::kStopIdFieldNumber;
const int EntitySelector::kDirectionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntitySelector::EntitySelector()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.EntitySelector)
}
EntitySelector::EntitySelector(const EntitySelector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  agency_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_agency_id()) {
    agency_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.agency_id_);
  }
  route_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_route_id()) {
    route_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_id_);
  }
  stop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stop_id()) {
    stop_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stop_id_);
  }
  if (from.has_trip()) {
    trip_ = new ::transit_realtime::TripDescriptor(*from.trip_);
  } else {
    trip_ = nullptr;
  }
  ::memcpy(&route_type_, &from.route_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_id_) -
    reinterpret_cast<char*>(&route_type_)) + sizeof(direction_id_));
  // @@protoc_insertion_point(copy_constructor:transit_realtime.EntitySelector)
}

void EntitySelector::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EntitySelector_gtfs_2drealtime_2eproto.base);
  agency_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_id_) -
      reinterpret_cast<char*>(&trip_)) + sizeof(direction_id_));
}

EntitySelector::~EntitySelector() {
  // @@protoc_insertion_point(destructor:transit_realtime.EntitySelector)
  SharedDtor();
}

void EntitySelector::SharedDtor() {
  agency_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trip_;
}

void EntitySelector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntitySelector& EntitySelector::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EntitySelector_gtfs_2drealtime_2eproto.base);
  return *internal_default_instance();
}


void EntitySelector::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.EntitySelector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      agency_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      route_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      stop_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(trip_ != nullptr);
      trip_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&route_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&direction_id_) -
        reinterpret_cast<char*>(&route_type_)) + sizeof(direction_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EntitySelector::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EntitySelector*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string agency_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.EntitySelector.agency_id");
        object = msg->mutable_agency_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string route_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.EntitySelector.route_id");
        object = msg->mutable_route_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 route_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_route_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .transit_realtime.TripDescriptor trip = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::transit_realtime::TripDescriptor::_InternalParse;
        object = msg->mutable_trip();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional string stop_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.EntitySelector.stop_id");
        object = msg->mutable_stop_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 direction_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_direction_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
      if ((8000u <= tag && tag < 16000u) ||
          (72000u <= tag && tag < 80000u)) {
        auto res = msg->_extensions_.ParseField(tag, {_InternalParse, msg}, ptr, end,
            internal_default_instance(), &msg->_internal_metadata_, ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
        continue;
      }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EntitySelector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.EntitySelector)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string agency_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agency_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->agency_id().data(), static_cast<int>(this->agency_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.EntitySelector.agency_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string route_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->route_id().data(), static_cast<int>(this->route_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.EntitySelector.route_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 route_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_route_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &route_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.TripDescriptor trip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stop_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stop_id().data(), static_cast<int>(this->stop_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.EntitySelector.stop_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 direction_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_direction_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag && tag < 16000u) ||
            (72000u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.EntitySelector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.EntitySelector)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EntitySelector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.EntitySelector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string agency_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->agency_id().data(), static_cast<int>(this->agency_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.EntitySelector.agency_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->agency_id(), output);
  }

  // optional string route_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->route_id().data(), static_cast<int>(this->route_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.EntitySelector.route_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->route_id(), output);
  }

  // optional int32 route_type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->route_type(), output);
  }

  // optional .transit_realtime.TripDescriptor trip = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::trip(this), output);
  }

  // optional string stop_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stop_id().data(), static_cast<int>(this->stop_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.EntitySelector.stop_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->stop_id(), output);
  }

  // optional uint32 direction_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->direction_id(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(1000, 2000, output);

  // Extension range [9000, 10000)
  _extensions_.SerializeWithCachedSizes(9000, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transit_realtime.EntitySelector)
}

::google::protobuf::uint8* EntitySelector::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.EntitySelector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string agency_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->agency_id().data(), static_cast<int>(this->agency_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.EntitySelector.agency_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->agency_id(), target);
  }

  // optional string route_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->route_id().data(), static_cast<int>(this->route_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.EntitySelector.route_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->route_id(), target);
  }

  // optional int32 route_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->route_type(), target);
  }

  // optional .transit_realtime.TripDescriptor trip = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::trip(this), target);
  }

  // optional string stop_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stop_id().data(), static_cast<int>(this->stop_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.EntitySelector.stop_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stop_id(), target);
  }

  // optional uint32 direction_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->direction_id(), target);
  }

  // Extension range [1000, 2000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 2000, target);

  // Extension range [9000, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      9000, 10000, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.EntitySelector)
  return target;
}

size_t EntitySelector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.EntitySelector)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string agency_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agency_id());
    }

    // optional string route_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->route_id());
    }

    // optional string stop_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_id());
    }

    // optional .transit_realtime.TripDescriptor trip = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *trip_);
    }

    // optional int32 route_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->route_type());
    }

    // optional uint32 direction_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direction_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntitySelector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.EntitySelector)
  GOOGLE_DCHECK_NE(&from, this);
  const EntitySelector* source =
      ::google::protobuf::DynamicCastToGenerated<EntitySelector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.EntitySelector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.EntitySelector)
    MergeFrom(*source);
  }
}

void EntitySelector::MergeFrom(const EntitySelector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.EntitySelector)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      agency_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.agency_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      route_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      stop_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stop_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_trip()->::transit_realtime::TripDescriptor::MergeFrom(from.trip());
    }
    if (cached_has_bits & 0x00000010u) {
      route_type_ = from.route_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      direction_id_ = from.direction_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EntitySelector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.EntitySelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntitySelector::CopyFrom(const EntitySelector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.EntitySelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntitySelector::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (has_trip()) {
    if (!this->trip_->IsInitialized()) return false;
  }
  return true;
}

void EntitySelector::Swap(EntitySelector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntitySelector::InternalSwap(EntitySelector* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  agency_id_.Swap(&other->agency_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  route_id_.Swap(&other->route_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stop_id_.Swap(&other->stop_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trip_, other->trip_);
  swap(route_type_, other->route_type_);
  swap(direction_id_, other->direction_id_);
}

::google::protobuf::Metadata EntitySelector::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gtfs_2drealtime_2eproto);
  return ::file_level_metadata_gtfs_2drealtime_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TranslatedString_Translation::InitAsDefaultInstance() {
}
class TranslatedString_Translation::HasBitSetters {
 public:
  static void set_has_text(TranslatedString_Translation* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_language(TranslatedString_Translation* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TranslatedString_Translation::kTextFieldNumber;
const int TranslatedString_Translation::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TranslatedString_Translation::TranslatedString_Translation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.TranslatedString.Translation)
}
TranslatedString_Translation::TranslatedString_Translation(const TranslatedString_Translation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TranslatedString.Translation)
}

void TranslatedString_Translation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TranslatedString_Translation_gtfs_2drealtime_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TranslatedString_Translation::~TranslatedString_Translation() {
  // @@protoc_insertion_point(destructor:transit_realtime.TranslatedString.Translation)
  SharedDtor();
}

void TranslatedString_Translation::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TranslatedString_Translation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TranslatedString_Translation& TranslatedString_Translation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TranslatedString_Translation_gtfs_2drealtime_2eproto.base);
  return *internal_default_instance();
}


void TranslatedString_Translation::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TranslatedString.Translation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      language_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TranslatedString_Translation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TranslatedString_Translation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string text = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.TranslatedString.Translation.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string language = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("transit_realtime.TranslatedString.Translation.language");
        object = msg->mutable_language();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
      if ((8000u <= tag && tag < 16000u) ||
          (72000u <= tag && tag < 80000u)) {
        auto res = msg->_extensions_.ParseField(tag, {_InternalParse, msg}, ptr, end,
            internal_default_instance(), &msg->_internal_metadata_, ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
        continue;
      }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TranslatedString_Translation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.TranslatedString.Translation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.TranslatedString.Translation.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string language = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), static_cast<int>(this->language().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transit_realtime.TranslatedString.Translation.language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag && tag < 16000u) ||
            (72000u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.TranslatedString.Translation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.TranslatedString.Translation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TranslatedString_Translation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.TranslatedString.Translation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TranslatedString.Translation.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional string language = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TranslatedString.Translation.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->language(), output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(1000, 2000, output);

  // Extension range [9000, 10000)
  _extensions_.SerializeWithCachedSizes(9000, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transit_realtime.TranslatedString.Translation)
}

::google::protobuf::uint8* TranslatedString_Translation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TranslatedString.Translation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TranslatedString.Translation.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional string language = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transit_realtime.TranslatedString.Translation.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->language(), target);
  }

  // Extension range [1000, 2000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 2000, target);

  // Extension range [9000, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      9000, 10000, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TranslatedString.Translation)
  return target;
}

size_t TranslatedString_Translation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TranslatedString.Translation)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string language = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TranslatedString_Translation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.TranslatedString.Translation)
  GOOGLE_DCHECK_NE(&from, this);
  const TranslatedString_Translation* source =
      ::google::protobuf::DynamicCastToGenerated<TranslatedString_Translation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.TranslatedString.Translation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.TranslatedString.Translation)
    MergeFrom(*source);
  }
}

void TranslatedString_Translation::MergeFrom(const TranslatedString_Translation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TranslatedString.Translation)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
  }
}

void TranslatedString_Translation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.TranslatedString.Translation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranslatedString_Translation::CopyFrom(const TranslatedString_Translation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TranslatedString.Translation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslatedString_Translation::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TranslatedString_Translation::Swap(TranslatedString_Translation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TranslatedString_Translation::InternalSwap(TranslatedString_Translation* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_.Swap(&other->language_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TranslatedString_Translation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gtfs_2drealtime_2eproto);
  return ::file_level_metadata_gtfs_2drealtime_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TranslatedString::InitAsDefaultInstance() {
}
class TranslatedString::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TranslatedString::kTranslationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TranslatedString::TranslatedString()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transit_realtime.TranslatedString)
}
TranslatedString::TranslatedString(const TranslatedString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      translation_(from.translation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:transit_realtime.TranslatedString)
}

void TranslatedString::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TranslatedString_gtfs_2drealtime_2eproto.base);
}

TranslatedString::~TranslatedString() {
  // @@protoc_insertion_point(destructor:transit_realtime.TranslatedString)
  SharedDtor();
}

void TranslatedString::SharedDtor() {
}

void TranslatedString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TranslatedString& TranslatedString::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TranslatedString_gtfs_2drealtime_2eproto.base);
  return *internal_default_instance();
}


void TranslatedString::Clear() {
// @@protoc_insertion_point(message_clear_start:transit_realtime.TranslatedString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  translation_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TranslatedString::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TranslatedString*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .transit_realtime.TranslatedString.Translation translation = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::transit_realtime::TranslatedString_Translation::_InternalParse;
          object = msg->add_translation();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
      if ((8000u <= tag && tag < 16000u) ||
          (72000u <= tag && tag < 80000u)) {
        auto res = msg->_extensions_.ParseField(tag, {_InternalParse, msg}, ptr, end,
            internal_default_instance(), &msg->_internal_metadata_, ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
        continue;
      }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TranslatedString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transit_realtime.TranslatedString)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .transit_realtime.TranslatedString.Translation translation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_translation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag && tag < 16000u) ||
            (72000u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transit_realtime.TranslatedString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transit_realtime.TranslatedString)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TranslatedString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transit_realtime.TranslatedString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .transit_realtime.TranslatedString.Translation translation = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->translation_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->translation(static_cast<int>(i)),
      output);
  }

  // Extension range [1000, 2000)
  _extensions_.SerializeWithCachedSizes(1000, 2000, output);

  // Extension range [9000, 10000)
  _extensions_.SerializeWithCachedSizes(9000, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transit_realtime.TranslatedString)
}

::google::protobuf::uint8* TranslatedString::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transit_realtime.TranslatedString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .transit_realtime.TranslatedString.Translation translation = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->translation_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->translation(static_cast<int>(i)), target);
  }

  // Extension range [1000, 2000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 2000, target);

  // Extension range [9000, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      9000, 10000, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transit_realtime.TranslatedString)
  return target;
}

size_t TranslatedString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transit_realtime.TranslatedString)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transit_realtime.TranslatedString.Translation translation = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->translation_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->translation(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TranslatedString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transit_realtime.TranslatedString)
  GOOGLE_DCHECK_NE(&from, this);
  const TranslatedString* source =
      ::google::protobuf::DynamicCastToGenerated<TranslatedString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transit_realtime.TranslatedString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transit_realtime.TranslatedString)
    MergeFrom(*source);
  }
}

void TranslatedString::MergeFrom(const TranslatedString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transit_realtime.TranslatedString)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  translation_.MergeFrom(from.translation_);
}

void TranslatedString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transit_realtime.TranslatedString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranslatedString::CopyFrom(const TranslatedString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transit_realtime.TranslatedString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslatedString::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::google::protobuf::internal::AllAreInitialized(this->translation())) return false;
  return true;
}

void TranslatedString::Swap(TranslatedString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TranslatedString::InternalSwap(TranslatedString* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&translation_)->InternalSwap(CastToBase(&other->translation_));
}

::google::protobuf::Metadata TranslatedString::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gtfs_2drealtime_2eproto);
  return ::file_level_metadata_gtfs_2drealtime_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace transit_realtime
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::transit_realtime::FeedMessage* Arena::CreateMaybeMessage< ::transit_realtime::FeedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::transit_realtime::FeedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::FeedHeader* Arena::CreateMaybeMessage< ::transit_realtime::FeedHeader >(Arena* arena) {
  return Arena::CreateInternal< ::transit_realtime::FeedHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::FeedEntity* Arena::CreateMaybeMessage< ::transit_realtime::FeedEntity >(Arena* arena) {
  return Arena::CreateInternal< ::transit_realtime::FeedEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::TripUpdate_StopTimeEvent* Arena::CreateMaybeMessage< ::transit_realtime::TripUpdate_StopTimeEvent >(Arena* arena) {
  return Arena::CreateInternal< ::transit_realtime::TripUpdate_StopTimeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::TripUpdate_StopTimeUpdate* Arena::CreateMaybeMessage< ::transit_realtime::TripUpdate_StopTimeUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::transit_realtime::TripUpdate_StopTimeUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::TripUpdate_TripProperties* Arena::CreateMaybeMessage< ::transit_realtime::TripUpdate_TripProperties >(Arena* arena) {
  return Arena::CreateInternal< ::transit_realtime::TripUpdate_TripProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::TripUpdate* Arena::CreateMaybeMessage< ::transit_realtime::TripUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::transit_realtime::TripUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::VehiclePosition_CarriageDetails* Arena::CreateMaybeMessage< ::transit_realtime::VehiclePosition_CarriageDetails >(Arena* arena) {
  return Arena::CreateInternal< ::transit_realtime::VehiclePosition_CarriageDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::VehiclePosition* Arena::CreateMaybeMessage< ::transit_realtime::VehiclePosition >(Arena* arena) {
  return Arena::CreateInternal< ::transit_realtime::VehiclePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::Alert* Arena::CreateMaybeMessage< ::transit_realtime::Alert >(Arena* arena) {
  return Arena::CreateInternal< ::transit_realtime::Alert >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::TimeRange* Arena::CreateMaybeMessage< ::transit_realtime::TimeRange >(Arena* arena) {
  return Arena::CreateInternal< ::transit_realtime::TimeRange >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::Position* Arena::CreateMaybeMessage< ::transit_realtime::Position >(Arena* arena) {
  return Arena::CreateInternal< ::transit_realtime::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::TripDescriptor* Arena::CreateMaybeMessage< ::transit_realtime::TripDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::transit_realtime::TripDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::VehicleDescriptor* Arena::CreateMaybeMessage< ::transit_realtime::VehicleDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::transit_realtime::VehicleDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::EntitySelector* Arena::CreateMaybeMessage< ::transit_realtime::EntitySelector >(Arena* arena) {
  return Arena::CreateInternal< ::transit_realtime::EntitySelector >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::TranslatedString_Translation* Arena::CreateMaybeMessage< ::transit_realtime::TranslatedString_Translation >(Arena* arena) {
  return Arena::CreateInternal< ::transit_realtime::TranslatedString_Translation >(arena);
}
template<> PROTOBUF_NOINLINE ::transit_realtime::TranslatedString* Arena::CreateMaybeMessage< ::transit_realtime::TranslatedString >(Arena* arena) {
  return Arena::CreateInternal< ::transit_realtime::TranslatedString >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
